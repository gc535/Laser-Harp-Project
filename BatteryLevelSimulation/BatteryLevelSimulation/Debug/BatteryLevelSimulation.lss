
BatteryLevelSimulation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000031a  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010c  0080010c  000003ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c43  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ee  00000000  00000000  000010ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000547  00000000  00000000  000018dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00001e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000485  00000000  00000000  00001fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000425  00000000  00000000  00002439  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000285e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e1       	ldi	r30, 0x1A	; 26
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  9e:	0c 94 8b 01 	jmp	0x316	; 0x316 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <timer_init>:
void USART_putstring(unsigned char *theString){
	int i = 0;
	for(i;i<strlen(theString);i++){
		USART_Transmit(theString[i]);
	}
}
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	84 bd       	out	0x24, r24	; 36
  aa:	9c e9       	ldi	r25, 0x9C	; 156
  ac:	97 bd       	out	0x27, r25	; 39
  ae:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  b2:	85 e0       	ldi	r24, 0x05	; 5
  b4:	85 bd       	out	0x25, r24	; 37
  b6:	08 95       	ret

000000b8 <USART_Receive>:
  b8:	e0 ec       	ldi	r30, 0xC0	; 192
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 23       	and	r24, r24
  c0:	ec f7       	brge	.-6      	; 0xbc <USART_Receive+0x4>
  c2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  c6:	08 95       	ret

000000c8 <USART_Init>:

void USART_Init(unsigned int ubrr){
	//baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
  c8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
  cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	//enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  d0:	88 e1       	ldi	r24, 0x18	; 24
  d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	//format: 8 bit data, 1 stop bit
	UCSR0C = (3<<UCSZ00);
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  dc:	08 95       	ret

000000de <Toggle>:
	Data_IO = 0xFF;
}

void Toggle()
{
	ControlBus |= 1<<Enable;
  de:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	80 ea       	ldi	r24, 0xA0	; 160
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <Toggle+0x4>
	//DO NOT modify this value unless ur 100% sure
	_delay_us(30);
	ControlBus &= ~1<<Enable;
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	80 7c       	andi	r24, 0xC0	; 192
  ea:	85 b9       	out	0x05, r24	; 5
  ec:	08 95       	ret

000000ee <Check_Busy>:
	_delay_us(50);
}

void Check_Busy()
{
	Data_IO = 0x00;
  ee:	1a b8       	out	0x0a, r1	; 10
	ControlBus |= 1<<RW;
  f0:	2b 9a       	sbi	0x05, 3	; 5
	ControlBus &= ~1<<RS;
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	88 7f       	andi	r24, 0xF8	; 248
  f6:	85 b9       	out	0x05, r24	; 5

	while (DataBus >= 0x80)
  f8:	5f 9b       	sbis	0x0b, 7	; 11
  fa:	04 c0       	rjmp	.+8      	; 0x104 <Check_Busy+0x16>
	{
		Toggle();
  fc:	0e 94 6f 00 	call	0xde	; 0xde <Toggle>
{
	Data_IO = 0x00;
	ControlBus |= 1<<RW;
	ControlBus &= ~1<<RS;

	while (DataBus >= 0x80)
 100:	5f 99       	sbic	0x0b, 7	; 11
 102:	fc cf       	rjmp	.-8      	; 0xfc <Check_Busy+0xe>
	{
		Toggle();
	}
	Data_IO = 0xFF;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	8a b9       	out	0x0a, r24	; 10
 108:	08 95       	ret

0000010a <Send_Command>:
	_delay_us(30);
	ControlBus &= ~1<<Enable;
}

void Send_Command(unsigned char command)
{
 10a:	cf 93       	push	r28
 10c:	c8 2f       	mov	r28, r24
	Check_Busy();
 10e:	0e 94 77 00 	call	0xee	; 0xee <Check_Busy>
	DataBus = command;
 112:	cb b9       	out	0x0b, r28	; 11
	ControlBus &= ~ ((1<<RW)|(1<<RS));
 114:	85 b1       	in	r24, 0x05	; 5
 116:	83 7f       	andi	r24, 0xF3	; 243
 118:	85 b9       	out	0x05, r24	; 5
	Toggle();
 11a:	0e 94 6f 00 	call	0xde	; 0xde <Toggle>
	DataBus = 0;
 11e:	1b b8       	out	0x0b, r1	; 11
}
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <lcd_init>:
	//format: 8 bit data, 1 stop bit
	UCSR0C = (3<<UCSZ00);
}

void lcd_init(){
	Control_IO |= 1<<Enable | 1<<RW | 1<<RS;
 124:	84 b1       	in	r24, 0x04	; 4
 126:	8c 62       	ori	r24, 0x2C	; 44
 128:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	8f e5       	ldi	r24, 0x5F	; 95
 12c:	9a ee       	ldi	r25, 0xEA	; 234
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_init+0xa>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcd_init+0x10>
 134:	00 00       	nop
	_delay_ms(15);

	Send_Command(CLEAR);
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 85 00 	call	0x10a	; 0x10a <Send_Command>
 13e:	8f e3       	ldi	r24, 0x3F	; 63
 140:	9f e1       	ldi	r25, 0x1F	; 31
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_init+0x1e>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_init+0x24>
 148:	00 00       	nop
	_delay_ms(2);
	Send_Command(FUNCTION);
 14a:	88 e3       	ldi	r24, 0x38	; 56
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 85 00 	call	0x10a	; 0x10a <Send_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	87 ec       	ldi	r24, 0xC7	; 199
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <lcd_init+0x32>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <lcd_init+0x38>
 15c:	00 00       	nop
	_delay_us(50);
	Send_Command(ALL_ON);
 15e:	8e e0       	ldi	r24, 0x0E	; 14
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 85 00 	call	0x10a	; 0x10a <Send_Command>
 166:	87 ec       	ldi	r24, 0xC7	; 199
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_init+0x46>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_init+0x4c>
 170:	00 00       	nop
 172:	08 95       	ret

00000174 <Send_Char>:
	Toggle();
	DataBus = 0;
}

void Send_Char(unsigned char character)
{
 174:	cf 93       	push	r28
 176:	c8 2f       	mov	r28, r24
	Check_Busy();
 178:	0e 94 77 00 	call	0xee	; 0xee <Check_Busy>
	DataBus = character;
 17c:	cb b9       	out	0x0b, r28	; 11
	ControlBus &= ~ (1<<RW);
 17e:	2b 98       	cbi	0x05, 3	; 5
	ControlBus |= 1<<RS;
 180:	2a 9a       	sbi	0x05, 2	; 5
	Toggle();
 182:	0e 94 6f 00 	call	0xde	; 0xde <Toggle>
	DataBus = 0;
 186:	1b b8       	out	0x0b, r1	; 11
}
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <Send_String>:

void Send_String(char *string){
 18c:	ef 92       	push	r14
 18e:	ff 92       	push	r15
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	8c 01       	movw	r16, r24
 19a:	7c 01       	movw	r14, r24
	int i = 0;
 19c:	c0 e0       	ldi	r28, 0x00	; 0
 19e:	d0 e0       	ldi	r29, 0x00	; 0
	for(i;i<strlen(string);i++){
 1a0:	06 c0       	rjmp	.+12     	; 0x1ae <Send_String+0x22>
		Send_Char(string[i]);
 1a2:	f7 01       	movw	r30, r14
 1a4:	81 91       	ld	r24, Z+
 1a6:	7f 01       	movw	r14, r30
 1a8:	0e 94 ba 00 	call	0x174	; 0x174 <Send_Char>
	DataBus = 0;
}

void Send_String(char *string){
	int i = 0;
	for(i;i<strlen(string);i++){
 1ac:	21 96       	adiw	r28, 0x01	; 1
 1ae:	f8 01       	movw	r30, r16
 1b0:	01 90       	ld	r0, Z+
 1b2:	00 20       	and	r0, r0
 1b4:	e9 f7       	brne	.-6      	; 0x1b0 <Send_String+0x24>
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	e0 1b       	sub	r30, r16
 1ba:	f1 0b       	sbc	r31, r17
 1bc:	ce 17       	cp	r28, r30
 1be:	df 07       	cpc	r29, r31
 1c0:	80 f3       	brcs	.-32     	; 0x1a2 <Send_String+0x16>
		Send_Char(string[i]);
	}
}
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	08 95       	ret

000001d0 <main>:

int main(void)
{
	lcd_init();
 1d0:	0e 94 92 00 	call	0x124	; 0x124 <lcd_init>
	USART_Init(MYUBRR);
 1d4:	87 e6       	ldi	r24, 0x67	; 103
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 64 00 	call	0xc8	; 0xc8 <USART_Init>
	timer_init();
 1dc:	0e 94 53 00 	call	0xa6	; 0xa6 <timer_init>
	sei();
 1e0:	78 94       	sei
    Send_String("`abcdefghi");
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 c6 00 	call	0x18c	; 0x18c <Send_String>
	Send_Command(0xBD);
 1ea:	8d eb       	ldi	r24, 0xBD	; 189
 1ec:	0e 94 85 00 	call	0x10a	; 0x10a <Send_Command>
 1f0:	87 ec       	ldi	r24, 0xC7	; 199
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <main+0x24>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x2a>
 1fa:	00 00       	nop
	_delay_us(50);
	while (1)
	{
		fake_battery = USART_Receive();
 1fc:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_Receive>
 200:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	}
 204:	fb cf       	rjmp	.-10     	; 0x1fc <main+0x2c>

00000206 <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	0f 93       	push	r16
 212:	1f 93       	push	r17
 214:	2f 93       	push	r18
 216:	3f 93       	push	r19
 218:	4f 93       	push	r20
 21a:	5f 93       	push	r21
 21c:	6f 93       	push	r22
 21e:	7f 93       	push	r23
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
 224:	af 93       	push	r26
 226:	bf 93       	push	r27
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
	int bar = fake_battery * 16 / 255;
 230:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
	int i = 16;
	tim_cnt++;
 234:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <tim_cnt>
 238:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <tim_cnt+0x1>
 23c:	2f 5f       	subi	r18, 0xFF	; 255
 23e:	3f 4f       	sbci	r19, 0xFF	; 255
	if(tim_cnt >= 100){
 240:	24 36       	cpi	r18, 0x64	; 100
 242:	31 05       	cpc	r19, r1
 244:	2c f4       	brge	.+10     	; 0x250 <__vector_14+0x4a>
}

ISR(TIMER0_COMPA_vect){
	int bar = fake_battery * 16 / 255;
	int i = 16;
	tim_cnt++;
 246:	30 93 0e 01 	sts	0x010E, r19	; 0x80010e <tim_cnt+0x1>
 24a:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <tim_cnt>
 24e:	26 c0       	rjmp	.+76     	; 0x29c <__vector_14+0x96>
		fake_battery = USART_Receive();
	}
}

ISR(TIMER0_COMPA_vect){
	int bar = fake_battery * 16 / 255;
 250:	20 e1       	ldi	r18, 0x10	; 16
 252:	82 9f       	mul	r24, r18
 254:	c0 01       	movw	r24, r0
 256:	11 24       	eor	r1, r1
 258:	6f ef       	ldi	r22, 0xFF	; 255
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__divmodhi4>
 260:	8b 01       	movw	r16, r22
	int i = 16;
	tim_cnt++;
	if(tim_cnt >= 100){
		tim_cnt = 0;
 262:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <tim_cnt+0x1>
 266:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <tim_cnt>
 26a:	c0 e1       	ldi	r28, 0x10	; 16
 26c:	d0 e0       	ldi	r29, 0x00	; 0
		for(i;i>0;i--){
			if(bar){
 26e:	01 15       	cp	r16, r1
 270:	11 05       	cpc	r17, r1
 272:	31 f0       	breq	.+12     	; 0x280 <__vector_14+0x7a>
				Send_Char(0xFF);
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	0e 94 ba 00 	call	0x174	; 0x174 <Send_Char>
			}else{
				Send_Char(0x17);
			}
			if(bar){
			    bar--;
 27a:	01 50       	subi	r16, 0x01	; 1
 27c:	11 09       	sbc	r17, r1
 27e:	03 c0       	rjmp	.+6      	; 0x286 <__vector_14+0x80>
		tim_cnt = 0;
		for(i;i>0;i--){
			if(bar){
				Send_Char(0xFF);
			}else{
				Send_Char(0x17);
 280:	87 e1       	ldi	r24, 0x17	; 23
 282:	0e 94 ba 00 	call	0x174	; 0x174 <Send_Char>
 286:	21 97       	sbiw	r28, 0x01	; 1
	int bar = fake_battery * 16 / 255;
	int i = 16;
	tim_cnt++;
	if(tim_cnt >= 100){
		tim_cnt = 0;
		for(i;i>0;i--){
 288:	91 f7       	brne	.-28     	; 0x26e <__vector_14+0x68>
			}
			if(bar){
			    bar--;
			}
		}
		Send_Command(0xBD);
 28a:	8d eb       	ldi	r24, 0xBD	; 189
 28c:	0e 94 85 00 	call	0x10a	; 0x10a <Send_Command>
 290:	87 ec       	ldi	r24, 0xC7	; 199
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <__vector_14+0x8e>
 298:	00 c0       	rjmp	.+0      	; 0x29a <__vector_14+0x94>
 29a:	00 00       	nop
		_delay_us(50);
	}
}
 29c:	ff 91       	pop	r31
 29e:	ef 91       	pop	r30
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	bf 91       	pop	r27
 2a6:	af 91       	pop	r26
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <__divmodhi4>:
 2c6:	97 fb       	bst	r25, 7
 2c8:	07 2e       	mov	r0, r23
 2ca:	16 f4       	brtc	.+4      	; 0x2d0 <__divmodhi4+0xa>
 2cc:	00 94       	com	r0
 2ce:	07 d0       	rcall	.+14     	; 0x2de <__divmodhi4_neg1>
 2d0:	77 fd       	sbrc	r23, 7
 2d2:	09 d0       	rcall	.+18     	; 0x2e6 <__divmodhi4_neg2>
 2d4:	0e 94 77 01 	call	0x2ee	; 0x2ee <__udivmodhi4>
 2d8:	07 fc       	sbrc	r0, 7
 2da:	05 d0       	rcall	.+10     	; 0x2e6 <__divmodhi4_neg2>
 2dc:	3e f4       	brtc	.+14     	; 0x2ec <__divmodhi4_exit>

000002de <__divmodhi4_neg1>:
 2de:	90 95       	com	r25
 2e0:	81 95       	neg	r24
 2e2:	9f 4f       	sbci	r25, 0xFF	; 255
 2e4:	08 95       	ret

000002e6 <__divmodhi4_neg2>:
 2e6:	70 95       	com	r23
 2e8:	61 95       	neg	r22
 2ea:	7f 4f       	sbci	r23, 0xFF	; 255

000002ec <__divmodhi4_exit>:
 2ec:	08 95       	ret

000002ee <__udivmodhi4>:
 2ee:	aa 1b       	sub	r26, r26
 2f0:	bb 1b       	sub	r27, r27
 2f2:	51 e1       	ldi	r21, 0x11	; 17
 2f4:	07 c0       	rjmp	.+14     	; 0x304 <__udivmodhi4_ep>

000002f6 <__udivmodhi4_loop>:
 2f6:	aa 1f       	adc	r26, r26
 2f8:	bb 1f       	adc	r27, r27
 2fa:	a6 17       	cp	r26, r22
 2fc:	b7 07       	cpc	r27, r23
 2fe:	10 f0       	brcs	.+4      	; 0x304 <__udivmodhi4_ep>
 300:	a6 1b       	sub	r26, r22
 302:	b7 0b       	sbc	r27, r23

00000304 <__udivmodhi4_ep>:
 304:	88 1f       	adc	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	5a 95       	dec	r21
 30a:	a9 f7       	brne	.-22     	; 0x2f6 <__udivmodhi4_loop>
 30c:	80 95       	com	r24
 30e:	90 95       	com	r25
 310:	bc 01       	movw	r22, r24
 312:	cd 01       	movw	r24, r26
 314:	08 95       	ret

00000316 <_exit>:
 316:	f8 94       	cli

00000318 <__stop_program>:
 318:	ff cf       	rjmp	.-2      	; 0x318 <__stop_program>
