
TC2004ATest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000001c0  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a55  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000747  00000000  00000000  00000d55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ee  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  0000188c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fe  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000159  00000000  00000000  00001d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001e97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ec       	ldi	r30, 0xC0	; 192
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  8e:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <Toggle>:
	Data_IO = 0xFF;
}

void Toggle()
{
	ControlBus |= 1<<Enable;
  96:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	85 ed       	ldi	r24, 0xD5	; 213
  9a:	8a 95       	dec	r24
  9c:	f1 f7       	brne	.-4      	; 0x9a <Toggle+0x4>
  9e:	00 00       	nop
	//DO NOT modify this value unless ur 100% sure
    _delay_us(40);
	ControlBus &= ~1<<Enable;
  a0:	85 b1       	in	r24, 0x05	; 5
  a2:	80 7c       	andi	r24, 0xC0	; 192
  a4:	85 b9       	out	0x05, r24	; 5
  a6:	08 95       	ret

000000a8 <Check_Busy>:
	_delay_us(50);
}

void Check_Busy()
{
	Data_IO = 0x00;
  a8:	1a b8       	out	0x0a, r1	; 10
	ControlBus &= ~(1<<RS);
  aa:	2a 98       	cbi	0x05, 2	; 5
	ControlBus |= 1<<RW;
  ac:	2b 9a       	sbi	0x05, 3	; 5

	while (DataBus >= 0x80)
  ae:	5f 9b       	sbis	0x0b, 7	; 11
  b0:	04 c0       	rjmp	.+8      	; 0xba <Check_Busy+0x12>
	{
		Toggle();
  b2:	0e 94 4b 00 	call	0x96	; 0x96 <Toggle>
{
	Data_IO = 0x00;
	ControlBus &= ~(1<<RS);
	ControlBus |= 1<<RW;

	while (DataBus >= 0x80)
  b6:	5f 99       	sbic	0x0b, 7	; 11
  b8:	fc cf       	rjmp	.-8      	; 0xb2 <Check_Busy+0xa>
	{
		Toggle();
	}
	Data_IO = 0xFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	8a b9       	out	0x0a, r24	; 10
  be:	08 95       	ret

000000c0 <Send_Command>:
    _delay_us(40);
	ControlBus &= ~1<<Enable;
}

void Send_Command(unsigned char command)
{
  c0:	cf 93       	push	r28
  c2:	c8 2f       	mov	r28, r24
	Check_Busy();
  c4:	0e 94 54 00 	call	0xa8	; 0xa8 <Check_Busy>
	DataBus = command;
  c8:	cb b9       	out	0x0b, r28	; 11
	ControlBus &= ~( (1<<RW) | (1<<RS) );
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	83 7f       	andi	r24, 0xF3	; 243
  ce:	85 b9       	out	0x05, r24	; 5
	Toggle();
  d0:	0e 94 4b 00 	call	0x96	; 0x96 <Toggle>
	DataBus = 0;
  d4:	1b b8       	out	0x0b, r1	; 11
}
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <lcd_init>:
	{
	}
}

void lcd_init(){
	Control_IO |= 1<<Enable | 1<<RW | 1<<RS;
  da:	84 b1       	in	r24, 0x04	; 4
  dc:	8c 62       	ori	r24, 0x2C	; 44
  de:	84 b9       	out	0x04, r24	; 4
	Data_IO = 0xFF;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	89 ef       	ldi	r24, 0xF9	; 249
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <lcd_init+0x10>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcd_init+0x1a>
  f4:	00 00       	nop
	_delay_ms(20);

	Send_Command(FUNCTION);
  f6:	88 e3       	ldi	r24, 0x38	; 56
  f8:	0e 94 60 00 	call	0xc0	; 0xc0 <Send_Command>
  fc:	8f e1       	ldi	r24, 0x1F	; 31
  fe:	9e e4       	ldi	r25, 0x4E	; 78
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_init+0x26>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_init+0x2c>
 106:	00 00       	nop
	_delay_ms(5);
	Send_Command(FUNCTION);
 108:	88 e3       	ldi	r24, 0x38	; 56
 10a:	0e 94 60 00 	call	0xc0	; 0xc0 <Send_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	8f e1       	ldi	r24, 0x1F	; 31
 110:	93 e0       	ldi	r25, 0x03	; 3
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_init+0x38>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_init+0x3e>
 118:	00 00       	nop
	_delay_us(200);
// 	Send_Command(FUNCTION);
// 	_delay_us(50);
// 	Send_Command(FUNCTION);
// 	_delay_us(50);
	Send_Command(CLEAR);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 60 00 	call	0xc0	; 0xc0 <Send_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	8f e1       	ldi	r24, 0x1F	; 31
 122:	9e e4       	ldi	r25, 0x4E	; 78
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_init+0x4a>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_init+0x50>
 12a:	00 00       	nop
	_delay_ms(5);
	Send_Command(ENTRY);
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	0e 94 60 00 	call	0xc0	; 0xc0 <Send_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	87 ec       	ldi	r24, 0xC7	; 199
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <lcd_init+0x5c>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <lcd_init+0x62>
 13c:	00 00       	nop
	_delay_us(50);
	Send_Command(ALL_ON);
 13e:	8f e0       	ldi	r24, 0x0F	; 15
 140:	0e 94 60 00 	call	0xc0	; 0xc0 <Send_Command>
 144:	87 ec       	ldi	r24, 0xC7	; 199
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcd_init+0x6e>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <lcd_init+0x74>
 14e:	00 00       	nop
 150:	08 95       	ret

00000152 <Send_Char>:
	Toggle();
	DataBus = 0;
}

void Send_Char(unsigned char character)
{
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
	Check_Busy();
 156:	0e 94 54 00 	call	0xa8	; 0xa8 <Check_Busy>
	DataBus = character;
 15a:	cb b9       	out	0x0b, r28	; 11
	ControlBus &= ~ (1<<RW);
 15c:	2b 98       	cbi	0x05, 3	; 5
	ControlBus |= 1<<RS;
 15e:	2a 9a       	sbi	0x05, 2	; 5
	Toggle();
 160:	0e 94 4b 00 	call	0x96	; 0x96 <Toggle>
	DataBus = 0;
 164:	1b b8       	out	0x0b, r1	; 11
}
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <Send_String>:

void Send_String(const char *string){
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	8c 01       	movw	r16, r24
 178:	7c 01       	movw	r14, r24
	int i = 0;
 17a:	c0 e0       	ldi	r28, 0x00	; 0
 17c:	d0 e0       	ldi	r29, 0x00	; 0
	for(i;i<strlen(string);i++){
 17e:	06 c0       	rjmp	.+12     	; 0x18c <Send_String+0x22>
		Send_Char(string[i]);
 180:	f7 01       	movw	r30, r14
 182:	81 91       	ld	r24, Z+
 184:	7f 01       	movw	r14, r30
 186:	0e 94 a9 00 	call	0x152	; 0x152 <Send_Char>
	DataBus = 0;
}

void Send_String(const char *string){
	int i = 0;
	for(i;i<strlen(string);i++){
 18a:	21 96       	adiw	r28, 0x01	; 1
 18c:	f8 01       	movw	r30, r16
 18e:	01 90       	ld	r0, Z+
 190:	00 20       	and	r0, r0
 192:	e9 f7       	brne	.-6      	; 0x18e <Send_String+0x24>
 194:	31 97       	sbiw	r30, 0x01	; 1
 196:	e0 1b       	sub	r30, r16
 198:	f1 0b       	sbc	r31, r17
 19a:	ce 17       	cp	r28, r30
 19c:	df 07       	cpc	r29, r31
 19e:	80 f3       	brcs	.-32     	; 0x180 <Send_String+0x16>
		Send_Char(string[i]);
	}
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	ff 90       	pop	r15
 1aa:	ef 90       	pop	r14
 1ac:	08 95       	ret

000001ae <main>:



int main(void)
{
    lcd_init();
 1ae:	0e 94 6d 00 	call	0xda	; 0xda <lcd_init>
	
	Send_String("AbCdEfGhiJ");
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	0e 94 b5 00 	call	0x16a	; 0x16a <Send_String>
// 	Send_Command(SECONDLINE);
// 	_delay_us(50);
// 	Send_String("0123456789");
	while(1)
	{
	}
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <main+0xc>

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
