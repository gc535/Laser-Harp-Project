
LCDtest1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000001a8  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a08  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000747  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c8  00000000  00000000  0000143b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001804  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ef  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000159  00000000  00000000  00001c97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  8e:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <Toggle>:
	Data_IO = 0xFF;
}

void Toggle()
{
	ControlBus |= 1<<Enable;
  96:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	80 ea       	ldi	r24, 0xA0	; 160
  9a:	8a 95       	dec	r24
  9c:	f1 f7       	brne	.-4      	; 0x9a <Toggle+0x4>
	//DO NOT modify this value unless ur 100% sure
    _delay_us(30);
	ControlBus &= ~1<<Enable;
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	80 7c       	andi	r24, 0xC0	; 192
  a2:	85 b9       	out	0x05, r24	; 5
  a4:	08 95       	ret

000000a6 <Check_Busy>:
	}
}

void Check_Busy()
{
	Data_IO = 0x00;
  a6:	1a b8       	out	0x0a, r1	; 10
	ControlBus |= 1<<RW;
  a8:	2b 9a       	sbi	0x05, 3	; 5
	ControlBus &= ~1<<RS;
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	88 7f       	andi	r24, 0xF8	; 248
  ae:	85 b9       	out	0x05, r24	; 5

	while (DataBus >= 0x80)
  b0:	5f 9b       	sbis	0x0b, 7	; 11
  b2:	04 c0       	rjmp	.+8      	; 0xbc <Check_Busy+0x16>
	{
		Toggle();
  b4:	0e 94 4b 00 	call	0x96	; 0x96 <Toggle>
{
	Data_IO = 0x00;
	ControlBus |= 1<<RW;
	ControlBus &= ~1<<RS;

	while (DataBus >= 0x80)
  b8:	5f 99       	sbic	0x0b, 7	; 11
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <Check_Busy+0xe>
	{
		Toggle();
	}
	Data_IO = 0xFF;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	8a b9       	out	0x0a, r24	; 10
  c0:	08 95       	ret

000000c2 <Send_Command>:
    _delay_us(30);
	ControlBus &= ~1<<Enable;
}

void Send_Command(unsigned char command)
{
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
	Check_Busy();
  c6:	0e 94 53 00 	call	0xa6	; 0xa6 <Check_Busy>
	DataBus = command;
  ca:	cb b9       	out	0x0b, r28	; 11
	ControlBus &= ~ ((1<<RW)|(1<<RS));
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	83 7f       	andi	r24, 0xF3	; 243
  d0:	85 b9       	out	0x05, r24	; 5
	Toggle();
  d2:	0e 94 4b 00 	call	0x96	; 0x96 <Toggle>
	DataBus = 0;
  d6:	1b b8       	out	0x0b, r1	; 11
}
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <Send_Char>:

void Send_Char(unsigned char character)
{
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
	Check_Busy();
  e0:	0e 94 53 00 	call	0xa6	; 0xa6 <Check_Busy>
	DataBus = character;
  e4:	cb b9       	out	0x0b, r28	; 11
	ControlBus &= ~ (1<<RW);
  e6:	2b 98       	cbi	0x05, 3	; 5
	ControlBus |= 1<<RS;
  e8:	2a 9a       	sbi	0x05, 2	; 5
	Toggle();
  ea:	0e 94 4b 00 	call	0x96	; 0x96 <Toggle>
	DataBus = 0;
  ee:	1b b8       	out	0x0b, r1	; 11
}
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <Send_String>:

void Send_String(char *string){
  f4:	ef 92       	push	r14
  f6:	ff 92       	push	r15
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	8c 01       	movw	r16, r24
 102:	7c 01       	movw	r14, r24
	int i = 0;
 104:	c0 e0       	ldi	r28, 0x00	; 0
 106:	d0 e0       	ldi	r29, 0x00	; 0
	for(i;i<strlen(string);i++){
 108:	06 c0       	rjmp	.+12     	; 0x116 <Send_String+0x22>
		Send_Char(string[i]);
 10a:	f7 01       	movw	r30, r14
 10c:	81 91       	ld	r24, Z+
 10e:	7f 01       	movw	r14, r30
 110:	0e 94 6e 00 	call	0xdc	; 0xdc <Send_Char>
	DataBus = 0;
}

void Send_String(char *string){
	int i = 0;
	for(i;i<strlen(string);i++){
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	f8 01       	movw	r30, r16
 118:	01 90       	ld	r0, Z+
 11a:	00 20       	and	r0, r0
 11c:	e9 f7       	brne	.-6      	; 0x118 <Send_String+0x24>
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	e0 1b       	sub	r30, r16
 122:	f1 0b       	sbc	r31, r17
 124:	ce 17       	cp	r28, r30
 126:	df 07       	cpc	r29, r31
 128:	80 f3       	brcs	.-32     	; 0x10a <Send_String+0x16>
		Send_Char(string[i]);
	}
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	ff 90       	pop	r15
 134:	ef 90       	pop	r14
 136:	08 95       	ret

00000138 <main>:



int main(void)
{
	Control_IO |= 1<<Enable | 1<<RW | 1<<RS;
 138:	84 b1       	in	r24, 0x04	; 4
 13a:	8c 62       	ori	r24, 0x2C	; 44
 13c:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	8f e5       	ldi	r24, 0x5F	; 95
 140:	9a ee       	ldi	r25, 0xEA	; 234
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <main+0xa>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x10>
 148:	00 00       	nop
	_delay_ms(15);

	Send_Command(CLEAR);
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 61 00 	call	0xc2	; 0xc2 <Send_Command>
 150:	8f e3       	ldi	r24, 0x3F	; 63
 152:	9f e1       	ldi	r25, 0x1F	; 31
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <main+0x1c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0x22>
 15a:	00 00       	nop
	_delay_ms(2);
	Send_Command(FUNCTION);
 15c:	88 e3       	ldi	r24, 0x38	; 56
 15e:	0e 94 61 00 	call	0xc2	; 0xc2 <Send_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	87 ec       	ldi	r24, 0xC7	; 199
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0x2e>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x34>
 16c:	00 00       	nop
	_delay_us(50);
	Send_Command(ALL_ON);
 16e:	8e e0       	ldi	r24, 0x0E	; 14
 170:	0e 94 61 00 	call	0xc2	; 0xc2 <Send_Command>
 174:	87 ec       	ldi	r24, 0xC7	; 199
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0x40>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x46>
 17e:	00 00       	nop
	_delay_us(50);
	
	Send_String("0123456789");
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0e 94 7a 00 	call	0xf4	; 0xf4 <Send_String>
	Send_Command(SECONDLINE);
 188:	80 ec       	ldi	r24, 0xC0	; 192
 18a:	0e 94 61 00 	call	0xc2	; 0xc2 <Send_Command>
 18e:	87 ec       	ldi	r24, 0xC7	; 199
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x5a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x60>
 198:	00 00       	nop
	_delay_us(50);
	Send_String("AbCdEfGhIj");
 19a:	8b e0       	ldi	r24, 0x0B	; 11
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 7a 00 	call	0xf4	; 0xf4 <Send_String>
	while(1)
	{
	}
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <main+0x6a>

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
