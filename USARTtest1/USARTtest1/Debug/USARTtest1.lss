
USARTtest1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000016a  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009fb  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a2  00000000  00000000  00000ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c3  00000000  00000000  00001449  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  0000180c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000427  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000170  00000000  00000000  00001ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001e5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  9e:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Transmit>:
	}else if(x>UPP/4){
		USART_Transmit(0x32);
	}else{
		USART_Transmit(0x33);
	}
}
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	95 ff       	sbrs	r25, 5
  ae:	fd cf       	rjmp	.-6      	; 0xaa <USART_Transmit+0x4>
  b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  b4:	08 95       	ret

000000b6 <newline>:
  b6:	8d e0       	ldi	r24, 0x0D	; 13
  b8:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
  bc:	8a e0       	ldi	r24, 0x0A	; 10
  be:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
  c2:	08 95       	ret

000000c4 <USART_putstring>:

void USART_putstring(unsigned char *theString){
  c4:	ef 92       	push	r14
  c6:	ff 92       	push	r15
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	8c 01       	movw	r16, r24
  d2:	7c 01       	movw	r14, r24
	int i = 0;
  d4:	c0 e0       	ldi	r28, 0x00	; 0
  d6:	d0 e0       	ldi	r29, 0x00	; 0
	for(i;i<strlen(theString);i++){
  d8:	06 c0       	rjmp	.+12     	; 0xe6 <USART_putstring+0x22>
		USART_Transmit(theString[i]);
  da:	f7 01       	movw	r30, r14
  dc:	81 91       	ld	r24, Z+
  de:	7f 01       	movw	r14, r30
  e0:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
	}
}

void USART_putstring(unsigned char *theString){
	int i = 0;
	for(i;i<strlen(theString);i++){
  e4:	21 96       	adiw	r28, 0x01	; 1
  e6:	f8 01       	movw	r30, r16
  e8:	01 90       	ld	r0, Z+
  ea:	00 20       	and	r0, r0
  ec:	e9 f7       	brne	.-6      	; 0xe8 <USART_putstring+0x24>
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	e0 1b       	sub	r30, r16
  f2:	f1 0b       	sbc	r31, r17
  f4:	ce 17       	cp	r28, r30
  f6:	df 07       	cpc	r29, r31
  f8:	80 f3       	brcs	.-32     	; 0xda <USART_putstring+0x16>
		USART_Transmit(theString[i]);
	}
// 	for(i;i<5;i++){
// 		USART_Transmit(String1[i]);		
// 	}
}
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	1f 91       	pop	r17
 100:	0f 91       	pop	r16
 102:	ff 90       	pop	r15
 104:	ef 90       	pop	r14
 106:	08 95       	ret

00000108 <USART_Init>:

void USART_Init(unsigned int ubrr){
	//baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 108:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
 10c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	//enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 110:	88 e1       	ldi	r24, 0x18	; 24
 112:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	//format: 8 bit data, 1 stop bit
	UCSR0C = (3<<UCSZ00);
 116:	86 e0       	ldi	r24, 0x06	; 6
 118:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 11c:	08 95       	ret

0000011e <main>:

int main(void)
{
    unsigned char strng;
	//Initialization
    USART_Init(MYUBRR);
 11e:	87 e6       	ldi	r24, 0x67	; 103
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 84 00 	call	0x108	; 0x108 <USART_Init>
	//adc_init();
	sei();
 126:	78 94       	sei
	while (1) 
    {
	    USART_putstring(String1);
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 62 00 	call	0xc4	; 0xc4 <USART_putstring>
		newline();
 130:	0e 94 5b 00 	call	0xb6	; 0xb6 <newline>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	80 e7       	ldi	r24, 0x70	; 112
 138:	92 e0       	ldi	r25, 0x02	; 2
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0x1c>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0x26>
 144:	00 00       	nop
        _delay_ms(50);
 		USART_putstring(String2);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	0e 94 62 00 	call	0xc4	; 0xc4 <USART_putstring>
 		newline();
 14e:	0e 94 5b 00 	call	0xb6	; 0xb6 <newline>
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	80 e7       	ldi	r24, 0x70	; 112
 156:	92 e0       	ldi	r25, 0x02	; 2
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x3a>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x44>
 162:	00 00       	nop
 164:	e1 cf       	rjmp	.-62     	; 0x128 <main+0xa>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
