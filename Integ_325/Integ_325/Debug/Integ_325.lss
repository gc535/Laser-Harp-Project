
Integ_325.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  0000135c  000013f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000135c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000421  008001b6  008001b6  000014a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002600  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009cf  00000000  00000000  00003cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001366  00000000  00000000  00004693  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000538  00000000  00000000  000059fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a79  00000000  00000000  00005f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013a7  00000000  00000000  000069ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00007d54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      28:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__vector_10>
      2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      4c:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__vector_19>
      50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      5c:	62 00       	.word	0x0062	; ????
      5e:	68 00       	.word	0x0068	; ????
      60:	6e 00       	.word	0x006e	; ????
      62:	74 00       	.word	0x0074	; ????
      64:	7a 00       	.word	0x007a	; ????
      66:	80 00       	.word	0x0080	; ????
      68:	86 00       	.word	0x0086	; ????

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	ec e5       	ldi	r30, 0x5C	; 92
      7e:	f3 e1       	ldi	r31, 0x13	; 19
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	a6 3b       	cpi	r26, 0xB6	; 182
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	25 e0       	ldi	r18, 0x05	; 5
      8e:	a6 eb       	ldi	r26, 0xB6	; 182
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a7 3d       	cpi	r26, 0xD7	; 215
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>
      9c:	0e 94 42 07 	call	0xe84	; 0xe84 <main>
      a0:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <_exit>

000000a4 <__bad_interrupt>:
      a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <ADC_Channel_Select>:
void USART_putstring(const char *theString){
	int i = 0;
	for(i;i<strlen(theString);i++){
		USART_Transmit(theString[i]);
	}
}
      a8:	ec e7       	ldi	r30, 0x7C	; 124
      aa:	f0 e0       	ldi	r31, 0x00	; 0
      ac:	20 81       	ld	r18, Z
      ae:	28 7f       	andi	r18, 0xF8	; 248
      b0:	20 83       	st	Z, r18
      b2:	01 97       	sbiw	r24, 0x01	; 1
      b4:	87 30       	cpi	r24, 0x07	; 7
      b6:	91 05       	cpc	r25, r1
      b8:	70 f5       	brcc	.+92     	; 0x116 <ADC_Channel_Select+0x6e>
      ba:	82 5d       	subi	r24, 0xD2	; 210
      bc:	9f 4f       	sbci	r25, 0xFF	; 255
      be:	fc 01       	movw	r30, r24
      c0:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__tablejump2__>
      c4:	ec e7       	ldi	r30, 0x7C	; 124
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	80 81       	ld	r24, Z
      ca:	81 60       	ori	r24, 0x01	; 1
      cc:	80 83       	st	Z, r24
      ce:	08 95       	ret
      d0:	ec e7       	ldi	r30, 0x7C	; 124
      d2:	f0 e0       	ldi	r31, 0x00	; 0
      d4:	80 81       	ld	r24, Z
      d6:	82 60       	ori	r24, 0x02	; 2
      d8:	80 83       	st	Z, r24
      da:	08 95       	ret
      dc:	ec e7       	ldi	r30, 0x7C	; 124
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	80 81       	ld	r24, Z
      e2:	83 60       	ori	r24, 0x03	; 3
      e4:	80 83       	st	Z, r24
      e6:	08 95       	ret
      e8:	ec e7       	ldi	r30, 0x7C	; 124
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	80 81       	ld	r24, Z
      ee:	84 60       	ori	r24, 0x04	; 4
      f0:	80 83       	st	Z, r24
      f2:	08 95       	ret
      f4:	ec e7       	ldi	r30, 0x7C	; 124
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	80 81       	ld	r24, Z
      fa:	85 60       	ori	r24, 0x05	; 5
      fc:	80 83       	st	Z, r24
      fe:	08 95       	ret
     100:	ec e7       	ldi	r30, 0x7C	; 124
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	80 81       	ld	r24, Z
     106:	86 60       	ori	r24, 0x06	; 6
     108:	80 83       	st	Z, r24
     10a:	08 95       	ret
     10c:	ec e7       	ldi	r30, 0x7C	; 124
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	80 81       	ld	r24, Z
     112:	87 60       	ori	r24, 0x07	; 7
     114:	80 83       	st	Z, r24
     116:	08 95       	ret

00000118 <adc_start>:
     118:	ea e7       	ldi	r30, 0x7A	; 122
     11a:	f0 e0       	ldi	r31, 0x00	; 0
     11c:	80 81       	ld	r24, Z
     11e:	80 64       	ori	r24, 0x40	; 64
     120:	80 83       	st	Z, r24
     122:	08 95       	ret

00000124 <adc_init>:
     124:	ec e7       	ldi	r30, 0x7C	; 124
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	80 81       	ld	r24, Z
     12a:	80 64       	ori	r24, 0x40	; 64
     12c:	80 83       	st	Z, r24
     12e:	ea e7       	ldi	r30, 0x7A	; 122
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	80 81       	ld	r24, Z
     134:	8e 6a       	ori	r24, 0xAE	; 174
     136:	80 83       	st	Z, r24
     138:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <adc_channel>
     13c:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <adc_channel+0x1>
     140:	0e 94 54 00 	call	0xa8	; 0xa8 <ADC_Channel_Select>
     144:	0e 94 8c 00 	call	0x118	; 0x118 <adc_start>
     148:	08 95       	ret

0000014a <Toggle>:
     14a:	17 9a       	sbi	0x02, 7	; 2
     14c:	8a e6       	ldi	r24, 0x6A	; 106
     14e:	8a 95       	dec	r24
     150:	f1 f7       	brne	.-4      	; 0x14e <Toggle+0x4>
     152:	00 c0       	rjmp	.+0      	; 0x154 <Toggle+0xa>
     154:	17 98       	cbi	0x02, 7	; 2
     156:	08 95       	ret

00000158 <Check_Busy>:
     158:	17 b8       	out	0x07, r1	; 7
     15a:	16 9a       	sbi	0x02, 6	; 2
     15c:	82 b1       	in	r24, 0x02	; 2
     15e:	80 7c       	andi	r24, 0xC0	; 192
     160:	82 b9       	out	0x02, r24	; 2
     162:	47 9b       	sbis	0x08, 7	; 8
     164:	04 c0       	rjmp	.+8      	; 0x16e <Check_Busy+0x16>
     166:	0e 94 a5 00 	call	0x14a	; 0x14a <Toggle>
     16a:	47 99       	sbic	0x08, 7	; 8
     16c:	fc cf       	rjmp	.-8      	; 0x166 <Check_Busy+0xe>
     16e:	8f ef       	ldi	r24, 0xFF	; 255
     170:	87 b9       	out	0x07, r24	; 7
     172:	8d e0       	ldi	r24, 0x0D	; 13
     174:	8a 95       	dec	r24
     176:	f1 f7       	brne	.-4      	; 0x174 <Check_Busy+0x1c>
     178:	00 00       	nop
     17a:	08 95       	ret

0000017c <Send_Command>:
     17c:	cf 93       	push	r28
     17e:	c8 2f       	mov	r28, r24
     180:	0e 94 ac 00 	call	0x158	; 0x158 <Check_Busy>
     184:	c8 b9       	out	0x08, r28	; 8
     186:	82 b1       	in	r24, 0x02	; 2
     188:	8f 79       	andi	r24, 0x9F	; 159
     18a:	82 b9       	out	0x02, r24	; 2
     18c:	0e 94 a5 00 	call	0x14a	; 0x14a <Toggle>
     190:	18 b8       	out	0x08, r1	; 8
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <lcd_init>:
     196:	81 b1       	in	r24, 0x01	; 1
     198:	80 6e       	ori	r24, 0xE0	; 224
     19a:	81 b9       	out	0x01, r24	; 1
     19c:	8f e2       	ldi	r24, 0x2F	; 47
     19e:	95 e7       	ldi	r25, 0x75	; 117
     1a0:	01 97       	sbiw	r24, 0x01	; 1
     1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_init+0xa>
     1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <lcd_init+0x10>
     1a6:	00 00       	nop
     1a8:	88 e3       	ldi	r24, 0x38	; 56
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 be 00 	call	0x17c	; 0x17c <Send_Command>
     1b0:	8f e0       	ldi	r24, 0x0F	; 15
     1b2:	97 e2       	ldi	r25, 0x27	; 39
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <lcd_init+0x1e>
     1b8:	00 c0       	rjmp	.+0      	; 0x1ba <lcd_init+0x24>
     1ba:	00 00       	nop
     1bc:	88 e3       	ldi	r24, 0x38	; 56
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	0e 94 be 00 	call	0x17c	; 0x17c <Send_Command>
     1c4:	87 ee       	ldi	r24, 0xE7	; 231
     1c6:	93 e0       	ldi	r25, 0x03	; 3
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_init+0x32>
     1cc:	00 c0       	rjmp	.+0      	; 0x1ce <lcd_init+0x38>
     1ce:	00 00       	nop
     1d0:	88 e3       	ldi	r24, 0x38	; 56
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 be 00 	call	0x17c	; 0x17c <Send_Command>
     1d8:	95 e8       	ldi	r25, 0x85	; 133
     1da:	9a 95       	dec	r25
     1dc:	f1 f7       	brne	.-4      	; 0x1da <lcd_init+0x44>
     1de:	00 00       	nop
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 be 00 	call	0x17c	; 0x17c <Send_Command>
     1e8:	8f e9       	ldi	r24, 0x9F	; 159
     1ea:	9f e0       	ldi	r25, 0x0F	; 15
     1ec:	01 97       	sbiw	r24, 0x01	; 1
     1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_init+0x56>
     1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_init+0x5c>
     1f2:	00 00       	nop
     1f4:	86 e0       	ldi	r24, 0x06	; 6
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 be 00 	call	0x17c	; 0x17c <Send_Command>
     1fc:	95 e8       	ldi	r25, 0x85	; 133
     1fe:	9a 95       	dec	r25
     200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x68>
     202:	00 00       	nop
     204:	8e e0       	ldi	r24, 0x0E	; 14
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 be 00 	call	0x17c	; 0x17c <Send_Command>
     20c:	85 e8       	ldi	r24, 0x85	; 133
     20e:	8a 95       	dec	r24
     210:	f1 f7       	brne	.-4      	; 0x20e <lcd_init+0x78>
     212:	00 00       	nop
     214:	08 95       	ret

00000216 <Send_Char>:
     216:	cf 93       	push	r28
     218:	c8 2f       	mov	r28, r24
     21a:	0e 94 ac 00 	call	0x158	; 0x158 <Check_Busy>
     21e:	c8 b9       	out	0x08, r28	; 8
     220:	16 98       	cbi	0x02, 6	; 2
     222:	15 9a       	sbi	0x02, 5	; 2
     224:	0e 94 a5 00 	call	0x14a	; 0x14a <Toggle>
     228:	18 b8       	out	0x08, r1	; 8
     22a:	cf 91       	pop	r28
     22c:	08 95       	ret

0000022e <Clear_Line>:
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	c4 e1       	ldi	r28, 0x14	; 20
     234:	d0 e0       	ldi	r29, 0x00	; 0
     236:	80 e2       	ldi	r24, 0x20	; 32
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 0b 01 	call	0x216	; 0x216 <Send_Char>
     23e:	21 97       	sbiw	r28, 0x01	; 1
     240:	d1 f7       	brne	.-12     	; 0x236 <Clear_Line+0x8>
     242:	df 91       	pop	r29
     244:	cf 91       	pop	r28
     246:	08 95       	ret

00000248 <Send_String>:
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	8c 01       	movw	r16, r24
     256:	7c 01       	movw	r14, r24
     258:	c0 e0       	ldi	r28, 0x00	; 0
     25a:	d0 e0       	ldi	r29, 0x00	; 0
     25c:	06 c0       	rjmp	.+12     	; 0x26a <Send_String+0x22>
     25e:	f7 01       	movw	r30, r14
     260:	81 91       	ld	r24, Z+
     262:	7f 01       	movw	r14, r30
     264:	0e 94 0b 01 	call	0x216	; 0x216 <Send_Char>
     268:	21 96       	adiw	r28, 0x01	; 1
     26a:	f8 01       	movw	r30, r16
     26c:	01 90       	ld	r0, Z+
     26e:	00 20       	and	r0, r0
     270:	e9 f7       	brne	.-6      	; 0x26c <Send_String+0x24>
     272:	31 97       	sbiw	r30, 0x01	; 1
     274:	e0 1b       	sub	r30, r16
     276:	f1 0b       	sbc	r31, r17
     278:	ce 17       	cp	r28, r30
     27a:	df 07       	cpc	r29, r31
     27c:	80 f3       	brcs	.-32     	; 0x25e <Send_String+0x16>
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	ff 90       	pop	r15
     288:	ef 90       	pop	r14
     28a:	08 95       	ret

0000028c <SPI_Clock_Change>:
     28c:	2c b5       	in	r18, 0x2c	; 44
     28e:	2c 7f       	andi	r18, 0xFC	; 252
     290:	2c bd       	out	0x2c, r18	; 44
     292:	2d b5       	in	r18, 0x2d	; 45
     294:	2e 7f       	andi	r18, 0xFE	; 254
     296:	2d bd       	out	0x2d, r18	; 45
     298:	80 31       	cpi	r24, 0x10	; 16
     29a:	91 05       	cpc	r25, r1
     29c:	d9 f0       	breq	.+54     	; 0x2d4 <SPI_Clock_Change+0x48>
     29e:	34 f4       	brge	.+12     	; 0x2ac <SPI_Clock_Change+0x20>
     2a0:	82 30       	cpi	r24, 0x02	; 2
     2a2:	91 05       	cpc	r25, r1
     2a4:	61 f0       	breq	.+24     	; 0x2be <SPI_Clock_Change+0x32>
     2a6:	08 97       	sbiw	r24, 0x08	; 8
     2a8:	71 f0       	breq	.+28     	; 0x2c6 <SPI_Clock_Change+0x3a>
     2aa:	08 95       	ret
     2ac:	80 34       	cpi	r24, 0x40	; 64
     2ae:	91 05       	cpc	r25, r1
     2b0:	e1 f0       	breq	.+56     	; 0x2ea <SPI_Clock_Change+0x5e>
     2b2:	80 38       	cpi	r24, 0x80	; 128
     2b4:	91 05       	cpc	r25, r1
     2b6:	19 f1       	breq	.+70     	; 0x2fe <SPI_Clock_Change+0x72>
     2b8:	80 97       	sbiw	r24, 0x20	; 32
     2ba:	39 f5       	brne	.+78     	; 0x30a <SPI_Clock_Change+0x7e>
     2bc:	0f c0       	rjmp	.+30     	; 0x2dc <SPI_Clock_Change+0x50>
     2be:	8d b5       	in	r24, 0x2d	; 45
     2c0:	81 60       	ori	r24, 0x01	; 1
     2c2:	8d bd       	out	0x2d, r24	; 45
     2c4:	08 95       	ret
     2c6:	8d b5       	in	r24, 0x2d	; 45
     2c8:	81 60       	ori	r24, 0x01	; 1
     2ca:	8d bd       	out	0x2d, r24	; 45
     2cc:	8c b5       	in	r24, 0x2c	; 44
     2ce:	81 60       	ori	r24, 0x01	; 1
     2d0:	8c bd       	out	0x2c, r24	; 44
     2d2:	08 95       	ret
     2d4:	8c b5       	in	r24, 0x2c	; 44
     2d6:	81 60       	ori	r24, 0x01	; 1
     2d8:	8c bd       	out	0x2c, r24	; 44
     2da:	08 95       	ret
     2dc:	8d b5       	in	r24, 0x2d	; 45
     2de:	81 60       	ori	r24, 0x01	; 1
     2e0:	8d bd       	out	0x2d, r24	; 45
     2e2:	8c b5       	in	r24, 0x2c	; 44
     2e4:	82 60       	ori	r24, 0x02	; 2
     2e6:	8c bd       	out	0x2c, r24	; 44
     2e8:	08 95       	ret
     2ea:	8d b5       	in	r24, 0x2d	; 45
     2ec:	81 60       	ori	r24, 0x01	; 1
     2ee:	8d bd       	out	0x2d, r24	; 45
     2f0:	8c b5       	in	r24, 0x2c	; 44
     2f2:	81 60       	ori	r24, 0x01	; 1
     2f4:	8c bd       	out	0x2c, r24	; 44
     2f6:	8c b5       	in	r24, 0x2c	; 44
     2f8:	82 60       	ori	r24, 0x02	; 2
     2fa:	8c bd       	out	0x2c, r24	; 44
     2fc:	08 95       	ret
     2fe:	8c b5       	in	r24, 0x2c	; 44
     300:	81 60       	ori	r24, 0x01	; 1
     302:	8c bd       	out	0x2c, r24	; 44
     304:	8c b5       	in	r24, 0x2c	; 44
     306:	82 60       	ori	r24, 0x02	; 2
     308:	8c bd       	out	0x2c, r24	; 44
     30a:	08 95       	ret

0000030c <Address_Byte>:
     30c:	ef e3       	ldi	r30, 0x3F	; 63
     30e:	f5 e0       	ldi	r31, 0x05	; 5
     310:	90 83       	st	Z, r25
     312:	81 83       	std	Z+1, r24	; 0x01
     314:	72 83       	std	Z+2, r23	; 0x02
     316:	63 83       	std	Z+3, r22	; 0x03
     318:	cf 01       	movw	r24, r30
     31a:	08 95       	ret

0000031c <SPI_Master_init>:
     31c:	84 b1       	in	r24, 0x04	; 4
     31e:	87 60       	ori	r24, 0x07	; 7
     320:	84 b9       	out	0x04, r24	; 4
     322:	8c b5       	in	r24, 0x2c	; 44
     324:	80 65       	ori	r24, 0x50	; 80
     326:	8c bd       	out	0x2c, r24	; 44
     328:	08 95       	ret

0000032a <SPI_Master_Write>:
     32a:	8e bd       	out	0x2e, r24	; 46
     32c:	0d b4       	in	r0, 0x2d	; 45
     32e:	07 fe       	sbrs	r0, 7
     330:	fd cf       	rjmp	.-6      	; 0x32c <SPI_Master_Write+0x2>
     332:	8e b5       	in	r24, 0x2e	; 46
     334:	08 95       	ret

00000336 <Clock_Pulse>:
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	28 9a       	sbi	0x05, 0	; 5
     33c:	cb e0       	ldi	r28, 0x0B	; 11
     33e:	d0 e0       	ldi	r29, 0x00	; 0
     340:	8f ef       	ldi	r24, 0xFF	; 255
     342:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     346:	21 97       	sbiw	r28, 0x01	; 1
     348:	d9 f7       	brne	.-10     	; 0x340 <Clock_Pulse+0xa>
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	08 95       	ret

00000350 <SD_command>:
     350:	df 92       	push	r13
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	f8 2e       	mov	r15, r24
     360:	c4 2f       	mov	r28, r20
     362:	15 2f       	mov	r17, r21
     364:	e6 2e       	mov	r14, r22
     366:	d7 2e       	mov	r13, r23
     368:	d2 2f       	mov	r29, r18
     36a:	28 98       	cbi	0x05, 0	; 5
     36c:	80 64       	ori	r24, 0x40	; 64
     36e:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     372:	8d 2d       	mov	r24, r13
     374:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     378:	8e 2d       	mov	r24, r14
     37a:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     37e:	81 2f       	mov	r24, r17
     380:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     384:	ec 2e       	mov	r14, r28
     386:	8c 2f       	mov	r24, r28
     388:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     38c:	8d 2f       	mov	r24, r29
     38e:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     392:	8f ef       	ldi	r24, 0xFF	; 255
     394:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     398:	00 23       	and	r16, r16
     39a:	61 f0       	breq	.+24     	; 0x3b4 <SD_command+0x64>
     39c:	c3 e4       	ldi	r28, 0x43	; 67
     39e:	d5 e0       	ldi	r29, 0x05	; 5
     3a0:	10 e0       	ldi	r17, 0x00	; 0
     3a2:	0d 5b       	subi	r16, 0xBD	; 189
     3a4:	1a 4f       	sbci	r17, 0xFA	; 250
     3a6:	8f ef       	ldi	r24, 0xFF	; 255
     3a8:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     3ac:	89 93       	st	Y+, r24
     3ae:	c0 17       	cp	r28, r16
     3b0:	d1 07       	cpc	r29, r17
     3b2:	c9 f7       	brne	.-14     	; 0x3a6 <SD_command+0x56>
     3b4:	28 9a       	sbi	0x05, 0	; 5
     3b6:	88 e0       	ldi	r24, 0x08	; 8
     3b8:	f8 12       	cpse	r15, r24
     3ba:	08 c0       	rjmp	.+16     	; 0x3cc <SD_command+0x7c>
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	20 91 47 05 	lds	r18, 0x0547	; 0x800547 <sd_response+0x4>
     3c4:	e2 12       	cpse	r14, r18
     3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <SD_command+0x80>
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <SD_command+0x80>
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	df 90       	pop	r13
     3de:	08 95       	ret

000003e0 <SD_init>:
     3e0:	0f 93       	push	r16
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	0e 94 8e 01 	call	0x31c	; 0x31c <SPI_Master_init>
     3ea:	0e 94 9b 01 	call	0x336	; 0x336 <Clock_Pulse>
     3ee:	c3 e4       	ldi	r28, 0x43	; 67
     3f0:	d5 e0       	ldi	r29, 0x05	; 5
     3f2:	06 e0       	ldi	r16, 0x06	; 6
     3f4:	25 e9       	ldi	r18, 0x95	; 149
     3f6:	40 e0       	ldi	r20, 0x00	; 0
     3f8:	50 e0       	ldi	r21, 0x00	; 0
     3fa:	ba 01       	movw	r22, r20
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	0e 94 a8 01 	call	0x350	; 0x350 <SD_command>
     402:	88 81       	ld	r24, Y
     404:	81 30       	cpi	r24, 0x01	; 1
     406:	a9 f7       	brne	.-22     	; 0x3f2 <SD_init+0x12>
     408:	06 e0       	ldi	r16, 0x06	; 6
     40a:	27 e8       	ldi	r18, 0x87	; 135
     40c:	4a ea       	ldi	r20, 0xAA	; 170
     40e:	51 e0       	ldi	r21, 0x01	; 1
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	88 e0       	ldi	r24, 0x08	; 8
     416:	0e 94 a8 01 	call	0x350	; 0x350 <SD_command>
     41a:	89 2b       	or	r24, r25
     41c:	a9 f7       	brne	.-22     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     41e:	c3 e4       	ldi	r28, 0x43	; 67
     420:	d5 e0       	ldi	r29, 0x05	; 5
     422:	06 e0       	ldi	r16, 0x06	; 6
     424:	2f ef       	ldi	r18, 0xFF	; 255
     426:	40 e0       	ldi	r20, 0x00	; 0
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	ba 01       	movw	r22, r20
     42c:	87 e3       	ldi	r24, 0x37	; 55
     42e:	0e 94 a8 01 	call	0x350	; 0x350 <SD_command>
     432:	2f ef       	ldi	r18, 0xFF	; 255
     434:	40 e0       	ldi	r20, 0x00	; 0
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	ba 01       	movw	r22, r20
     43a:	89 e2       	ldi	r24, 0x29	; 41
     43c:	0e 94 a8 01 	call	0x350	; 0x350 <SD_command>
     440:	88 81       	ld	r24, Y
     442:	81 11       	cpse	r24, r1
     444:	ee cf       	rjmp	.-36     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	88 b9       	out	0x08, r24	; 8
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	0f 91       	pop	r16
     450:	08 95       	ret

00000452 <SD_Read_Single>:
     452:	af 92       	push	r10
     454:	bf 92       	push	r11
     456:	cf 92       	push	r12
     458:	df 92       	push	r13
     45a:	ef 92       	push	r14
     45c:	ff 92       	push	r15
     45e:	0f 93       	push	r16
     460:	1f 93       	push	r17
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	6a 01       	movw	r12, r20
     468:	79 01       	movw	r14, r18
     46a:	ea 01       	movw	r28, r20
     46c:	c2 0f       	add	r28, r18
     46e:	d3 1f       	adc	r29, r19
     470:	28 98       	cbi	0x05, 0	; 5
     472:	0e 94 86 01 	call	0x30c	; 0x30c <Address_Byte>
     476:	5c 01       	movw	r10, r24
     478:	81 e5       	ldi	r24, 0x51	; 81
     47a:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     47e:	f5 01       	movw	r30, r10
     480:	80 81       	ld	r24, Z
     482:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     486:	f5 01       	movw	r30, r10
     488:	81 81       	ldd	r24, Z+1	; 0x01
     48a:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     48e:	f5 01       	movw	r30, r10
     490:	82 81       	ldd	r24, Z+2	; 0x02
     492:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     496:	f5 01       	movw	r30, r10
     498:	83 81       	ldd	r24, Z+3	; 0x03
     49a:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     49e:	8f ef       	ldi	r24, 0xFF	; 255
     4a0:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     4a4:	0f 2e       	mov	r0, r31
     4a6:	f8 eb       	ldi	r31, 0xB8	; 184
     4a8:	af 2e       	mov	r10, r31
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	bf 2e       	mov	r11, r31
     4ae:	f0 2d       	mov	r31, r0
     4b0:	f5 01       	movw	r30, r10
     4b2:	80 81       	ld	r24, Z
     4b4:	91 81       	ldd	r25, Z+1	; 0x01
     4b6:	01 96       	adiw	r24, 0x01	; 1
     4b8:	91 83       	std	Z+1, r25	; 0x01
     4ba:	80 83       	st	Z, r24
     4bc:	8f ef       	ldi	r24, 0xFF	; 255
     4be:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     4c2:	f5 01       	movw	r30, r10
     4c4:	80 81       	ld	r24, Z
     4c6:	91 81       	ldd	r25, Z+1	; 0x01
     4c8:	4e 97       	sbiw	r24, 0x1e	; 30
     4ca:	1c f4       	brge	.+6      	; 0x4d2 <SD_Read_Single+0x80>
     4cc:	8e b5       	in	r24, 0x2e	; 46
     4ce:	81 11       	cpse	r24, r1
     4d0:	ef cf       	rjmp	.-34     	; 0x4b0 <SD_Read_Single+0x5e>
     4d2:	0f 2e       	mov	r0, r31
     4d4:	f8 eb       	ldi	r31, 0xB8	; 184
     4d6:	af 2e       	mov	r10, r31
     4d8:	f1 e0       	ldi	r31, 0x01	; 1
     4da:	bf 2e       	mov	r11, r31
     4dc:	f0 2d       	mov	r31, r0
     4de:	f5 01       	movw	r30, r10
     4e0:	82 81       	ldd	r24, Z+2	; 0x02
     4e2:	93 81       	ldd	r25, Z+3	; 0x03
     4e4:	01 96       	adiw	r24, 0x01	; 1
     4e6:	93 83       	std	Z+3, r25	; 0x03
     4e8:	82 83       	std	Z+2, r24	; 0x02
     4ea:	8f ef       	ldi	r24, 0xFF	; 255
     4ec:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     4f0:	f5 01       	movw	r30, r10
     4f2:	82 81       	ldd	r24, Z+2	; 0x02
     4f4:	93 81       	ldd	r25, Z+3	; 0x03
     4f6:	4e 97       	sbiw	r24, 0x1e	; 30
     4f8:	24 f0       	brlt	.+8      	; 0x502 <SD_Read_Single+0xb0>
     4fa:	c1 14       	cp	r12, r1
     4fc:	d1 04       	cpc	r13, r1
     4fe:	29 f4       	brne	.+10     	; 0x50a <SD_Read_Single+0xb8>
     500:	0f c0       	rjmp	.+30     	; 0x520 <SD_Read_Single+0xce>
     502:	8e b5       	in	r24, 0x2e	; 46
     504:	8e 3f       	cpi	r24, 0xFE	; 254
     506:	59 f7       	brne	.-42     	; 0x4de <SD_Read_Single+0x8c>
     508:	f8 cf       	rjmp	.-16     	; 0x4fa <SD_Read_Single+0xa8>
     50a:	a1 2c       	mov	r10, r1
     50c:	b1 2c       	mov	r11, r1
     50e:	8f ef       	ldi	r24, 0xFF	; 255
     510:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     514:	ff ef       	ldi	r31, 0xFF	; 255
     516:	af 1a       	sub	r10, r31
     518:	bf 0a       	sbc	r11, r31
     51a:	ac 14       	cp	r10, r12
     51c:	bd 04       	cpc	r11, r13
     51e:	b9 f7       	brne	.-18     	; 0x50e <SD_Read_Single+0xbc>
     520:	e1 14       	cp	r14, r1
     522:	f1 04       	cpc	r15, r1
     524:	61 f0       	breq	.+24     	; 0x53e <SD_Read_Single+0xec>
     526:	68 01       	movw	r12, r16
     528:	e0 0e       	add	r14, r16
     52a:	f1 1e       	adc	r15, r17
     52c:	8f ef       	ldi	r24, 0xFF	; 255
     52e:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     532:	f6 01       	movw	r30, r12
     534:	81 93       	st	Z+, r24
     536:	6f 01       	movw	r12, r30
     538:	ee 15       	cp	r30, r14
     53a:	ff 05       	cpc	r31, r15
     53c:	b9 f7       	brne	.-18     	; 0x52c <SD_Read_Single+0xda>
     53e:	c1 15       	cp	r28, r1
     540:	f2 e0       	ldi	r31, 0x02	; 2
     542:	df 07       	cpc	r29, r31
     544:	40 f4       	brcc	.+16     	; 0x556 <SD_Read_Single+0x104>
     546:	8f ef       	ldi	r24, 0xFF	; 255
     548:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     54c:	21 96       	adiw	r28, 0x01	; 1
     54e:	c1 15       	cp	r28, r1
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	d8 07       	cpc	r29, r24
     554:	c1 f7       	brne	.-16     	; 0x546 <SD_Read_Single+0xf4>
     556:	8f ef       	ldi	r24, 0xFF	; 255
     558:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     55c:	8f ef       	ldi	r24, 0xFF	; 255
     55e:	0e 94 95 01 	call	0x32a	; 0x32a <SPI_Master_Write>
     562:	28 9a       	sbi	0x05, 0	; 5
     564:	c8 eb       	ldi	r28, 0xB8	; 184
     566:	d1 e0       	ldi	r29, 0x01	; 1
     568:	0f 2e       	mov	r0, r31
     56a:	f3 e4       	ldi	r31, 0x43	; 67
     56c:	ef 2e       	mov	r14, r31
     56e:	f5 e0       	ldi	r31, 0x05	; 5
     570:	ff 2e       	mov	r15, r31
     572:	f0 2d       	mov	r31, r0
     574:	8c 81       	ldd	r24, Y+4	; 0x04
     576:	9d 81       	ldd	r25, Y+5	; 0x05
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	9d 83       	std	Y+5, r25	; 0x05
     57c:	8c 83       	std	Y+4, r24	; 0x04
     57e:	06 e0       	ldi	r16, 0x06	; 6
     580:	2f ef       	ldi	r18, 0xFF	; 255
     582:	40 e0       	ldi	r20, 0x00	; 0
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	ba 01       	movw	r22, r20
     588:	8c e0       	ldi	r24, 0x0C	; 12
     58a:	0e 94 a8 01 	call	0x350	; 0x350 <SD_command>
     58e:	8c 81       	ldd	r24, Y+4	; 0x04
     590:	9d 81       	ldd	r25, Y+5	; 0x05
     592:	4e 97       	sbiw	r24, 0x1e	; 30
     594:	24 f4       	brge	.+8      	; 0x59e <SD_Read_Single+0x14c>
     596:	f7 01       	movw	r30, r14
     598:	80 81       	ld	r24, Z
     59a:	81 11       	cpse	r24, r1
     59c:	eb cf       	rjmp	.-42     	; 0x574 <SD_Read_Single+0x122>
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	ff 90       	pop	r15
     5a8:	ef 90       	pop	r14
     5aa:	df 90       	pop	r13
     5ac:	cf 90       	pop	r12
     5ae:	bf 90       	pop	r11
     5b0:	af 90       	pop	r10
     5b2:	08 95       	ret

000005b4 <SD_2_Buffer>:
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	ac 01       	movw	r20, r24
     5ba:	fc 01       	movw	r30, r24
     5bc:	e1 5c       	subi	r30, 0xC1	; 193
     5be:	fc 4f       	sbci	r31, 0xFC	; 252
     5c0:	90 81       	ld	r25, Z
     5c2:	9f 3f       	cpi	r25, 0xFF	; 255
     5c4:	81 f0       	breq	.+32     	; 0x5e6 <SD_2_Buffer+0x32>
     5c6:	db 01       	movw	r26, r22
     5c8:	fa 01       	movw	r30, r20
     5ca:	e0 5c       	subi	r30, 0xC0	; 192
     5cc:	fc 4f       	sbci	r31, 0xFC	; 252
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	9d 93       	st	X+, r25
     5d4:	2f 5f       	subi	r18, 0xFF	; 255
     5d6:	3f 4f       	sbci	r19, 0xFF	; 255
     5d8:	ea 01       	movw	r28, r20
     5da:	c2 0f       	add	r28, r18
     5dc:	d3 1f       	adc	r29, r19
     5de:	91 91       	ld	r25, Z+
     5e0:	9f 3f       	cpi	r25, 0xFF	; 255
     5e2:	b9 f7       	brne	.-18     	; 0x5d2 <SD_2_Buffer+0x1e>
     5e4:	03 c0       	rjmp	.+6      	; 0x5ec <SD_2_Buffer+0x38>
     5e6:	ea 01       	movw	r28, r20
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	fb 01       	movw	r30, r22
     5ee:	e2 0f       	add	r30, r18
     5f0:	f3 1f       	adc	r31, r19
     5f2:	8f ef       	ldi	r24, 0xFF	; 255
     5f4:	80 83       	st	Z, r24
     5f6:	ce 01       	movw	r24, r28
     5f8:	01 96       	adiw	r24, 0x01	; 1
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	08 95       	ret

00000600 <MIDI_Buffer>:
     600:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <time_buff_ptr+0x1>
     604:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <time_buff_ptr>
     608:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <index_buff_ptr+0x1>
     60c:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <index_buff_ptr>
     610:	68 ec       	ldi	r22, 0xC8	; 200
     612:	71 e0       	ldi	r23, 0x01	; 1
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 da 02 	call	0x5b4	; 0x5b4 <SD_2_Buffer>
     61c:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <time_ptr+0x1>
     620:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <time_ptr>
     624:	6d e0       	ldi	r22, 0x0D	; 13
     626:	73 e0       	ldi	r23, 0x03	; 3
     628:	0e 94 da 02 	call	0x5b4	; 0x5b4 <SD_2_Buffer>
     62c:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <index_ptr+0x1>
     630:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <index_ptr>
     634:	61 e8       	ldi	r22, 0x81	; 129
     636:	72 e0       	ldi	r23, 0x02	; 2
     638:	0e 94 da 02 	call	0x5b4	; 0x5b4 <SD_2_Buffer>
     63c:	08 95       	ret

0000063e <timer_init>:
     63e:	8d e0       	ldi	r24, 0x0D	; 13
     640:	84 bd       	out	0x24, r24	; 36
     642:	87 e2       	ldi	r24, 0x27	; 39
     644:	87 bd       	out	0x27, r24	; 39
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     64c:	08 95       	ret

0000064e <USART_Transmit>:
     64e:	e0 ec       	ldi	r30, 0xC0	; 192
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	90 81       	ld	r25, Z
     654:	95 ff       	sbrs	r25, 5
     656:	fd cf       	rjmp	.-6      	; 0x652 <USART_Transmit+0x4>
     658:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     65c:	08 95       	ret

0000065e <USART_Init>:

void USART_Init(unsigned int ubrr){
	//baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     65e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
     662:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	//enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     666:	88 e1       	ldi	r24, 0x18	; 24
     668:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	//format: 8 bit data, 1 stop bit
	UCSR0C = (3<<UCSZ00);//110
     66c:	86 e0       	ldi	r24, 0x06	; 6
     66e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     672:	08 95       	ret

00000674 <Clock_Prescale>:
PUBLIC FUNCTIONS
these functions are used for general purposes
********************************/

void Clock_Prescale(){
	CLKPR = 0x80;
     674:	e1 e6       	ldi	r30, 0x61	; 97
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	80 e8       	ldi	r24, 0x80	; 128
     67a:	80 83       	st	Z, r24
	CLKPR = 0x00;
     67c:	10 82       	st	Z, r1
     67e:	08 95       	ret

00000680 <LCD_Disp_First>:
}

void LCD_Disp_First(int pwr, int instrm){
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	7c 01       	movw	r14, r24
     68e:	eb 01       	movw	r28, r22
	int temp = pwr;
	Send_Command(FIRSTLINE);
     690:	80 e8       	ldi	r24, 0x80	; 128
     692:	0e 94 be 00 	call	0x17c	; 0x17c <Send_Command>
	Clear_Line();
     696:	0e 94 17 01 	call	0x22e	; 0x22e <Clear_Line>
	Send_Command(FIRSTLINE);
     69a:	80 e8       	ldi	r24, 0x80	; 128
     69c:	0e 94 be 00 	call	0x17c	; 0x17c <Send_Command>
	if(instrm == 0){
     6a0:	20 97       	sbiw	r28, 0x00	; 0
     6a2:	29 f4       	brne	.+10     	; 0x6ae <LCD_Disp_First+0x2e>
		Send_String("Piano    ");
     6a4:	8e e4       	ldi	r24, 0x4E	; 78
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	0e 94 24 01 	call	0x248	; 0x248 <Send_String>
     6ac:	0e c0       	rjmp	.+28     	; 0x6ca <LCD_Disp_First+0x4a>
		}else if(instrm == 1){
     6ae:	c1 30       	cpi	r28, 0x01	; 1
     6b0:	d1 05       	cpc	r29, r1
     6b2:	29 f4       	brne	.+10     	; 0x6be <LCD_Disp_First+0x3e>
		Send_String("Guitar   ");
     6b4:	88 e5       	ldi	r24, 0x58	; 88
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	0e 94 24 01 	call	0x248	; 0x248 <Send_String>
     6bc:	06 c0       	rjmp	.+12     	; 0x6ca <LCD_Disp_First+0x4a>
		}else if(instrm == 2){
     6be:	22 97       	sbiw	r28, 0x02	; 2
     6c0:	21 f4       	brne	.+8      	; 0x6ca <LCD_Disp_First+0x4a>
		Send_String("Sax      ");
     6c2:	82 e6       	ldi	r24, 0x62	; 98
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	0e 94 24 01 	call	0x248	; 0x248 <Send_String>
	}
	
	Send_String("Power:");
     6ca:	8c e6       	ldi	r24, 0x6C	; 108
     6cc:	91 e0       	ldi	r25, 0x01	; 1
     6ce:	0e 94 24 01 	call	0x248	; 0x248 <Send_String>
	for(int i=0;i<pwr;i++){
     6d2:	1e 14       	cp	r1, r14
     6d4:	1f 04       	cpc	r1, r15
     6d6:	9c f4       	brge	.+38     	; 0x6fe <LCD_Disp_First+0x7e>
     6d8:	87 01       	movw	r16, r14
     6da:	c0 e0       	ldi	r28, 0x00	; 0
     6dc:	d0 e0       	ldi	r29, 0x00	; 0
		if(temp != 0){
     6de:	01 15       	cp	r16, r1
     6e0:	11 05       	cpc	r17, r1
     6e2:	31 f0       	breq	.+12     	; 0x6f0 <LCD_Disp_First+0x70>
			Send_Char(0xFF);
     6e4:	8f ef       	ldi	r24, 0xFF	; 255
     6e6:	0e 94 0b 01 	call	0x216	; 0x216 <Send_Char>
			temp--;
     6ea:	01 50       	subi	r16, 0x01	; 1
     6ec:	11 09       	sbc	r17, r1
     6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <LCD_Disp_First+0x76>
			}else{
			Send_Char(0x20);
     6f0:	80 e2       	ldi	r24, 0x20	; 32
     6f2:	0e 94 0b 01 	call	0x216	; 0x216 <Send_Char>
		}else if(instrm == 2){
		Send_String("Sax      ");
	}
	
	Send_String("Power:");
	for(int i=0;i<pwr;i++){
     6f6:	21 96       	adiw	r28, 0x01	; 1
     6f8:	ce 15       	cp	r28, r14
     6fa:	df 05       	cpc	r29, r15
     6fc:	81 f7       	brne	.-32     	; 0x6de <LCD_Disp_First+0x5e>
			temp--;
			}else{
			Send_Char(0x20);
		}//end else
	}//end for
}
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	0f 91       	pop	r16
     706:	ff 90       	pop	r15
     708:	ef 90       	pop	r14
     70a:	08 95       	ret

0000070c <LCD_Disp_Second>:

void LCD_Disp_Second(){
	Send_Command(SECONDLINE);
     70c:	80 ec       	ldi	r24, 0xC0	; 192
     70e:	0e 94 be 00 	call	0x17c	; 0x17c <Send_Command>
	Clear_Line();
     712:	0e 94 17 01 	call	0x22e	; 0x22e <Clear_Line>
	Send_Command(SECONDLINE);
     716:	80 ec       	ldi	r24, 0xC0	; 192
     718:	0e 94 be 00 	call	0x17c	; 0x17c <Send_Command>
	Send_String("   Mode: ");
     71c:	83 e7       	ldi	r24, 0x73	; 115
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	0e 94 24 01 	call	0x248	; 0x248 <Send_String>
	if(free_mode_flag){
     724:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <free_mode_flag>
     728:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <free_mode_flag+0x1>
     72c:	89 2b       	or	r24, r25
     72e:	29 f0       	breq	.+10     	; 0x73a <LCD_Disp_Second+0x2e>
		Send_String("Musician");
     730:	8d e7       	ldi	r24, 0x7D	; 125
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	0e 94 24 01 	call	0x248	; 0x248 <Send_String>
     738:	08 95       	ret
		}else{
		Send_String("Autoplay");
     73a:	86 e8       	ldi	r24, 0x86	; 134
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	0e 94 24 01 	call	0x248	; 0x248 <Send_String>
     742:	08 95       	ret

00000744 <LCD_Disp_Third>:
	}
}

void LCD_Disp_Third(int curr){//number of current music	
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	ec 01       	movw	r28, r24
	Send_Command(THIRDLINE);
     74a:	84 e9       	ldi	r24, 0x94	; 148
     74c:	0e 94 be 00 	call	0x17c	; 0x17c <Send_Command>
	Clear_Line();
     750:	0e 94 17 01 	call	0x22e	; 0x22e <Clear_Line>
	Send_Command(THIRDLINE);
     754:	84 e9       	ldi	r24, 0x94	; 148
     756:	0e 94 be 00 	call	0x17c	; 0x17c <Send_Command>
	
	if(free_mode_flag == 0){
     75a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <free_mode_flag>
     75e:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <free_mode_flag+0x1>
     762:	89 2b       	or	r24, r25
     764:	29 f4       	brne	.+10     	; 0x770 <LCD_Disp_Third+0x2c>
		Send_String("  Enjoy Playing!");
     766:	8f e8       	ldi	r24, 0x8F	; 143
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	0e 94 24 01 	call	0x248	; 0x248 <Send_String>
     76e:	16 c0       	rjmp	.+44     	; 0x79c <LCD_Disp_Third+0x58>
		}else{
		switch(curr){
     770:	c1 30       	cpi	r28, 0x01	; 1
     772:	d1 05       	cpc	r29, r1
     774:	51 f0       	breq	.+20     	; 0x78a <LCD_Disp_Third+0x46>
     776:	c3 30       	cpi	r28, 0x03	; 3
     778:	d1 05       	cpc	r29, r1
     77a:	61 f0       	breq	.+24     	; 0x794 <LCD_Disp_Third+0x50>
     77c:	cd 2b       	or	r28, r29
     77e:	71 f4       	brne	.+28     	; 0x79c <LCD_Disp_Third+0x58>
			case 0 :
			Send_String(music1);
     780:	8e e1       	ldi	r24, 0x1E	; 30
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 24 01 	call	0x248	; 0x248 <Send_String>
			break;
     788:	09 c0       	rjmp	.+18     	; 0x79c <LCD_Disp_Third+0x58>
			case 1 :
			Send_String(music2);
     78a:	80 e1       	ldi	r24, 0x10	; 16
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	0e 94 24 01 	call	0x248	; 0x248 <Send_String>
			break;
     792:	04 c0       	rjmp	.+8      	; 0x79c <LCD_Disp_Third+0x58>
			case 3 :
			Send_String(music3);
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 24 01 	call	0x248	; 0x248 <Send_String>
			break;
		}//end sw
	}//end else
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	08 95       	ret

000007a2 <LCD_Disp_Fourth>:

void LCD_Disp_Fourth(){	
	Send_Command(FOURTHLINE);
     7a2:	84 ed       	ldi	r24, 0xD4	; 212
     7a4:	0e 94 be 00 	call	0x17c	; 0x17c <Send_Command>
	Send_String("Mode Next OK  Timbre");	
     7a8:	80 ea       	ldi	r24, 0xA0	; 160
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	0e 94 24 01 	call	0x248	; 0x248 <Send_String>
     7b0:	08 95       	ret

000007b2 <Music_File_Addr>:
}

unsigned long Music_File_Addr(int musnum){
	switch(musnum){
     7b2:	81 30       	cpi	r24, 0x01	; 1
     7b4:	91 05       	cpc	r25, r1
     7b6:	39 f0       	breq	.+14     	; 0x7c6 <Music_File_Addr+0x14>
     7b8:	1c f4       	brge	.+6      	; 0x7c0 <Music_File_Addr+0xe>
     7ba:	89 2b       	or	r24, r25
     7bc:	51 f0       	breq	.+20     	; 0x7d2 <Music_File_Addr+0x20>
     7be:	08 c0       	rjmp	.+16     	; 0x7d0 <Music_File_Addr+0x1e>
     7c0:	07 97       	sbiw	r24, 0x07	; 7
     7c2:	64 f0       	brlt	.+24     	; 0x7dc <Music_File_Addr+0x2a>
     7c4:	05 c0       	rjmp	.+10     	; 0x7d0 <Music_File_Addr+0x1e>
		case 0 :
		return 16385;
		break;
		case 1 :
		return 16390;
     7c6:	66 e0       	ldi	r22, 0x06	; 6
     7c8:	70 e4       	ldi	r23, 0x40	; 64
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	08 95       	ret
     7d0:	08 95       	ret
}

unsigned long Music_File_Addr(int musnum){
	switch(musnum){
		case 0 :
		return 16385;
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	70 e4       	ldi	r23, 0x40	; 64
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	08 95       	ret
		break;
		case 1 :
		return 16390;
		break;
		case 2 :
		return 0;
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 6 :
		return 0;
		break;
	}
}
     7e4:	08 95       	ret

000007e6 <Hand_Detection>:

void Hand_Detection(int ch)
{
     7e6:	5f 92       	push	r5
     7e8:	6f 92       	push	r6
     7ea:	7f 92       	push	r7
     7ec:	8f 92       	push	r8
     7ee:	9f 92       	push	r9
     7f0:	af 92       	push	r10
     7f2:	bf 92       	push	r11
     7f4:	cf 92       	push	r12
     7f6:	df 92       	push	r13
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
	int current_note;
	int i = 0;
	for(i;i<(ch+1);i++){
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	4c 01       	movw	r8, r24
     808:	18 16       	cp	r1, r24
     80a:	19 06       	cpc	r1, r25
     80c:	0c f0       	brlt	.+2      	; 0x810 <Hand_Detection+0x2a>
     80e:	88 c0       	rjmp	.+272    	; 0x920 <__stack+0x21>
     810:	0f 2e       	mov	r0, r31
     812:	ff e7       	ldi	r31, 0x7F	; 127
     814:	af 2e       	mov	r10, r31
     816:	f5 e0       	ldi	r31, 0x05	; 5
     818:	bf 2e       	mov	r11, r31
     81a:	f0 2d       	mov	r31, r0
     81c:	0f 2e       	mov	r0, r31
     81e:	ff e5       	ldi	r31, 0x5F	; 95
     820:	ef 2e       	mov	r14, r31
     822:	f5 e0       	ldi	r31, 0x05	; 5
     824:	ff 2e       	mov	r15, r31
     826:	f0 2d       	mov	r31, r0
     828:	0f e4       	ldi	r16, 0x4F	; 79
     82a:	15 e0       	ldi	r17, 0x05	; 5
     82c:	0f 2e       	mov	r0, r31
     82e:	ff e6       	ldi	r31, 0x6F	; 111
     830:	cf 2e       	mov	r12, r31
     832:	f5 e0       	ldi	r31, 0x05	; 5
     834:	df 2e       	mov	r13, r31
     836:	f0 2d       	mov	r31, r0
     838:	0f 2e       	mov	r0, r31
     83a:	f0 e9       	ldi	r31, 0x90	; 144
     83c:	5f 2e       	mov	r5, r31
     83e:	f0 2d       	mov	r31, r0
     840:	c0 e0       	ldi	r28, 0x00	; 0
     842:	d0 e0       	ldi	r29, 0x00	; 0
		if(adc_sensitive_detect[i]){
			handflag_buffer[i] = 1;                //hand detected
     844:	66 24       	eor	r6, r6
     846:	63 94       	inc	r6
     848:	71 2c       	mov	r7, r1
void Hand_Detection(int ch)
{
	int current_note;
	int i = 0;
	for(i;i<(ch+1);i++){
		if(adc_sensitive_detect[i]){
     84a:	f5 01       	movw	r30, r10
     84c:	81 91       	ld	r24, Z+
     84e:	91 91       	ld	r25, Z+
     850:	5f 01       	movw	r10, r30
     852:	89 2b       	or	r24, r25
     854:	49 f0       	breq	.+18     	; 0x868 <Hand_Detection+0x82>
			handflag_buffer[i] = 1;                //hand detected
     856:	f7 01       	movw	r30, r14
     858:	71 82       	std	Z+1, r7	; 0x01
     85a:	60 82       	st	Z, r6
			}else if(!adc_sensitive_detect[i]){
			handflag_buffer[i] = 0;				   //no hand detected
		}
		
		if(handflag_buffer[i] == 1 && prehandflag_buffer[i] == 0){
     85c:	f8 01       	movw	r30, r16
     85e:	80 81       	ld	r24, Z
     860:	91 81       	ldd	r25, Z+1	; 0x01
     862:	89 2b       	or	r24, r25
     864:	29 f0       	breq	.+10     	; 0x870 <Hand_Detection+0x8a>
     866:	4b c0       	rjmp	.+150    	; 0x8fe <Hand_Detection+0x118>
	int i = 0;
	for(i;i<(ch+1);i++){
		if(adc_sensitive_detect[i]){
			handflag_buffer[i] = 1;                //hand detected
			}else if(!adc_sensitive_detect[i]){
			handflag_buffer[i] = 0;				   //no hand detected
     868:	f7 01       	movw	r30, r14
     86a:	11 82       	std	Z+1, r1	; 0x01
     86c:	10 82       	st	Z, r1
     86e:	25 c0       	rjmp	.+74     	; 0x8ba <Hand_Detection+0xd4>
		}
		
		if(handflag_buffer[i] == 1 && prehandflag_buffer[i] == 0){
			if(adc_buffer[i]){
     870:	f6 01       	movw	r30, r12
     872:	80 81       	ld	r24, Z
     874:	91 81       	ldd	r25, Z+1	; 0x01
     876:	89 2b       	or	r24, r25
     878:	09 f4       	brne	.+2      	; 0x87c <Hand_Detection+0x96>
     87a:	41 c0       	rjmp	.+130    	; 0x8fe <Hand_Detection+0x118>
				USART_Transmit(0x90+i);
     87c:	85 2d       	mov	r24, r5
     87e:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
				USART_Transmit(note_buffer[7*(adc_buffer[i]-1) + i]);    //7*parameter --- change pitch level of one string
     882:	f6 01       	movw	r30, r12
     884:	80 81       	ld	r24, Z
     886:	91 81       	ldd	r25, Z+1	; 0x01
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	fc 01       	movw	r30, r24
     88c:	ee 0f       	add	r30, r30
     88e:	ff 1f       	adc	r31, r31
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	e8 1b       	sub	r30, r24
     89a:	f9 0b       	sbc	r31, r25
     89c:	ec 0f       	add	r30, r28
     89e:	fd 1f       	adc	r31, r29
     8a0:	e1 5d       	subi	r30, 0xD1	; 209
     8a2:	fe 4f       	sbci	r31, 0xFE	; 254
     8a4:	80 81       	ld	r24, Z
     8a6:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
				USART_Transmit(0x40);
     8aa:	80 e4       	ldi	r24, 0x40	; 64
     8ac:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
				current_note = note_buffer[7*(adc_buffer[i]-1) + i];
			}
		}
		if(handflag_buffer[i] == 0 && prehandflag_buffer[i] == 1){
     8b0:	f7 01       	movw	r30, r14
     8b2:	80 81       	ld	r24, Z
     8b4:	91 81       	ldd	r25, Z+1	; 0x01
     8b6:	89 2b       	or	r24, r25
     8b8:	11 f5       	brne	.+68     	; 0x8fe <Hand_Detection+0x118>
     8ba:	f8 01       	movw	r30, r16
     8bc:	80 81       	ld	r24, Z
     8be:	91 81       	ldd	r25, Z+1	; 0x01
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	e9 f4       	brne	.+58     	; 0x8fe <Hand_Detection+0x118>
			USART_Transmit(0x90+i);
     8c4:	85 2d       	mov	r24, r5
     8c6:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
			USART_Transmit(note_buffer[7*(adc_buffer[i]-1) + i]);	//7*parameter --- change pitch level of one string
     8ca:	f6 01       	movw	r30, r12
     8cc:	80 81       	ld	r24, Z
     8ce:	91 81       	ldd	r25, Z+1	; 0x01
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	fc 01       	movw	r30, r24
     8d4:	ee 0f       	add	r30, r30
     8d6:	ff 1f       	adc	r31, r31
     8d8:	ee 0f       	add	r30, r30
     8da:	ff 1f       	adc	r31, r31
     8dc:	ee 0f       	add	r30, r30
     8de:	ff 1f       	adc	r31, r31
     8e0:	e8 1b       	sub	r30, r24
     8e2:	f9 0b       	sbc	r31, r25
     8e4:	ec 0f       	add	r30, r28
     8e6:	fd 1f       	adc	r31, r29
     8e8:	e1 5d       	subi	r30, 0xD1	; 209
     8ea:	fe 4f       	sbci	r31, 0xFE	; 254
     8ec:	80 81       	ld	r24, Z
     8ee:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
			USART_Transmit(0x00);
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
			adc_buffer[i] = 0;
     8f8:	f6 01       	movw	r30, r12
     8fa:	11 82       	std	Z+1, r1	; 0x01
     8fc:	10 82       	st	Z, r1
		}
		prehandflag_buffer[i] = handflag_buffer[i];
     8fe:	f7 01       	movw	r30, r14
     900:	81 91       	ld	r24, Z+
     902:	91 91       	ld	r25, Z+
     904:	7f 01       	movw	r14, r30
     906:	f8 01       	movw	r30, r16
     908:	81 93       	st	Z+, r24
     90a:	91 93       	st	Z+, r25
     90c:	8f 01       	movw	r16, r30

void Hand_Detection(int ch)
{
	int current_note;
	int i = 0;
	for(i;i<(ch+1);i++){
     90e:	21 96       	adiw	r28, 0x01	; 1
     910:	53 94       	inc	r5
     912:	f2 e0       	ldi	r31, 0x02	; 2
     914:	cf 0e       	add	r12, r31
     916:	d1 1c       	adc	r13, r1
     918:	c8 15       	cp	r28, r8
     91a:	d9 05       	cpc	r29, r9
     91c:	0c f4       	brge	.+2      	; 0x920 <__stack+0x21>
     91e:	95 cf       	rjmp	.-214    	; 0x84a <Hand_Detection+0x64>
			USART_Transmit(0x00);
			adc_buffer[i] = 0;
		}
		prehandflag_buffer[i] = handflag_buffer[i];
	}
}
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	ff 90       	pop	r15
     92a:	ef 90       	pop	r14
     92c:	df 90       	pop	r13
     92e:	cf 90       	pop	r12
     930:	bf 90       	pop	r11
     932:	af 90       	pop	r10
     934:	9f 90       	pop	r9
     936:	8f 90       	pop	r8
     938:	7f 90       	pop	r7
     93a:	6f 90       	pop	r6
     93c:	5f 90       	pop	r5
     93e:	08 95       	ret

00000940 <Midi_Switch_Instrument>:

void Midi_Switch_Instrument(){
	
	if(change_instrument_flag == 1){
     940:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <change_instrument_flag>
     944:	90 91 d4 05 	lds	r25, 0x05D4	; 0x8005d4 <change_instrument_flag+0x1>
     948:	01 97       	sbiw	r24, 0x01	; 1
     94a:	09 f0       	breq	.+2      	; 0x94e <Midi_Switch_Instrument+0xe>
     94c:	47 c0       	rjmp	.+142    	; 0x9dc <Midi_Switch_Instrument+0x9c>
		change_instrument_flag = 0;
     94e:	10 92 d4 05 	sts	0x05D4, r1	; 0x8005d4 <change_instrument_flag+0x1>
     952:	10 92 d3 05 	sts	0x05D3, r1	; 0x8005d3 <change_instrument_flag>
		if(Instrument_Type==0){
     956:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <Instrument_Type>
     95a:	90 91 d2 05 	lds	r25, 0x05D2	; 0x8005d2 <Instrument_Type+0x1>
     95e:	00 97       	sbiw	r24, 0x00	; 0
     960:	99 f4       	brne	.+38     	; 0x988 <Midi_Switch_Instrument+0x48>
			USART_Transmit(0XC0);
     962:	80 ec       	ldi	r24, 0xC0	; 192
     964:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
			USART_Transmit(0X01);
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
			USART_Transmit(0XC1);
     96e:	81 ec       	ldi	r24, 0xC1	; 193
     970:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
			USART_Transmit(0X01);
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
			USART_Transmit(0XC2);
     97a:	82 ec       	ldi	r24, 0xC2	; 194
     97c:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
			USART_Transmit(0X01);
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
     986:	08 95       	ret
			//USART_putstring(Grand_Piano);
		}
		else if(Instrument_Type==1){
     988:	81 30       	cpi	r24, 0x01	; 1
     98a:	91 05       	cpc	r25, r1
     98c:	99 f4       	brne	.+38     	; 0x9b4 <Midi_Switch_Instrument+0x74>
			USART_Transmit(0XC0);
     98e:	80 ec       	ldi	r24, 0xC0	; 192
     990:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
			USART_Transmit(0X41);
     994:	81 e4       	ldi	r24, 0x41	; 65
     996:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
			USART_Transmit(0XC1);
     99a:	81 ec       	ldi	r24, 0xC1	; 193
     99c:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
			USART_Transmit(0X41);
     9a0:	81 e4       	ldi	r24, 0x41	; 65
     9a2:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
			USART_Transmit(0XC2);
     9a6:	82 ec       	ldi	r24, 0xC2	; 194
     9a8:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
			USART_Transmit(0X41);
     9ac:	81 e4       	ldi	r24, 0x41	; 65
     9ae:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
     9b2:	08 95       	ret
			//USART_putstring(Alto_Sax);
		}
		else if(Instrument_Type==2){
     9b4:	02 97       	sbiw	r24, 0x02	; 2
     9b6:	91 f4       	brne	.+36     	; 0x9dc <Midi_Switch_Instrument+0x9c>
			USART_Transmit(0XC0);
     9b8:	80 ec       	ldi	r24, 0xC0	; 192
     9ba:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
			USART_Transmit(0X27);
     9be:	87 e2       	ldi	r24, 0x27	; 39
     9c0:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
			USART_Transmit(0XC1);
     9c4:	81 ec       	ldi	r24, 0xC1	; 193
     9c6:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
			USART_Transmit(0X27);
     9ca:	87 e2       	ldi	r24, 0x27	; 39
     9cc:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
			USART_Transmit(0XC2);
     9d0:	82 ec       	ldi	r24, 0xC2	; 194
     9d2:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
			USART_Transmit(0X27);
     9d6:	87 e2       	ldi	r24, 0x27	; 39
     9d8:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
     9dc:	08 95       	ret

000009de <laser_Initilazation>:
	}
	
}

void laser_Initilazation(){
		DDRA |= ~(0xFE);
     9de:	08 9a       	sbi	0x01, 0	; 1
		DDRD |= ~(0xFC);
     9e0:	8a b1       	in	r24, 0x0a	; 10
     9e2:	83 60       	ori	r24, 0x03	; 3
     9e4:	8a b9       	out	0x0a, r24	; 10
		DDRE |= ~(0xF3);
     9e6:	8d b1       	in	r24, 0x0d	; 13
     9e8:	8c 60       	ori	r24, 0x0C	; 12
     9ea:	8d b9       	out	0x0d, r24	; 13
		DDRG |= ~(0xE7);
     9ec:	83 b3       	in	r24, 0x13	; 19
     9ee:	88 61       	ori	r24, 0x18	; 24
     9f0:	83 bb       	out	0x13, r24	; 19
     9f2:	08 95       	ret

000009f4 <laser_Finder>:
}

void laser_Finder(unsigned char note_played){
	int reminder;
	reminder = note_played % 0x0C;
     9f4:	9b ea       	ldi	r25, 0xAB	; 171
     9f6:	89 9f       	mul	r24, r25
     9f8:	91 2d       	mov	r25, r1
     9fa:	11 24       	eor	r1, r1
     9fc:	96 95       	lsr	r25
     9fe:	96 95       	lsr	r25
     a00:	96 95       	lsr	r25
     a02:	29 2f       	mov	r18, r25
     a04:	22 0f       	add	r18, r18
     a06:	92 0f       	add	r25, r18
     a08:	99 0f       	add	r25, r25
     a0a:	99 0f       	add	r25, r25
     a0c:	89 1b       	sub	r24, r25
	if(reminder == 0 || reminder ==1 ){
     a0e:	82 30       	cpi	r24, 0x02	; 2
     a10:	28 f4       	brcc	.+10     	; 0xa1c <laser_Finder+0x28>
		beam = 0;   //do & do#
     a12:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <beam+0x1>
     a16:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <beam>
     a1a:	08 95       	ret
		}else if(reminder == 2 || reminder ==3 ){
     a1c:	28 2f       	mov	r18, r24
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	a9 01       	movw	r20, r18
     a22:	42 50       	subi	r20, 0x02	; 2
     a24:	51 09       	sbc	r21, r1
     a26:	42 30       	cpi	r20, 0x02	; 2
     a28:	51 05       	cpc	r21, r1
     a2a:	38 f4       	brcc	.+14     	; 0xa3a <laser_Finder+0x46>
		beam = 1;   //re & re#
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <beam+0x1>
     a34:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <beam>
     a38:	08 95       	ret
		DDRG |= ~(0xE7);
}

void laser_Finder(unsigned char note_played){
	int reminder;
	reminder = note_played % 0x0C;
     a3a:	90 e0       	ldi	r25, 0x00	; 0
	if(reminder == 0 || reminder ==1 ){
		beam = 0;   //do & do#
		}else if(reminder == 2 || reminder ==3 ){
		beam = 1;   //re & re#
		}else if(reminder == 4 ){
     a3c:	84 30       	cpi	r24, 0x04	; 4
     a3e:	91 05       	cpc	r25, r1
     a40:	39 f4       	brne	.+14     	; 0xa50 <laser_Finder+0x5c>
		beam = 2;   //mi
     a42:	82 e0       	ldi	r24, 0x02	; 2
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <beam+0x1>
     a4a:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <beam>
     a4e:	08 95       	ret
		}else if(reminder == 5 || reminder == 6 ){
     a50:	a9 01       	movw	r20, r18
     a52:	45 50       	subi	r20, 0x05	; 5
     a54:	51 09       	sbc	r21, r1
     a56:	42 30       	cpi	r20, 0x02	; 2
     a58:	51 05       	cpc	r21, r1
     a5a:	38 f4       	brcc	.+14     	; 0xa6a <laser_Finder+0x76>
		beam = 3;   //fa & fa#
     a5c:	83 e0       	ldi	r24, 0x03	; 3
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <beam+0x1>
     a64:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <beam>
     a68:	08 95       	ret
		}else if(reminder == 7 || reminder ==8 ){
     a6a:	a9 01       	movw	r20, r18
     a6c:	47 50       	subi	r20, 0x07	; 7
     a6e:	51 09       	sbc	r21, r1
     a70:	42 30       	cpi	r20, 0x02	; 2
     a72:	51 05       	cpc	r21, r1
     a74:	38 f4       	brcc	.+14     	; 0xa84 <laser_Finder+0x90>
		beam = 4;   //so & so#
     a76:	84 e0       	ldi	r24, 0x04	; 4
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <beam+0x1>
     a7e:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <beam>
     a82:	08 95       	ret
		}else if(reminder == 9 || reminder ==10 ){
     a84:	29 50       	subi	r18, 0x09	; 9
     a86:	31 09       	sbc	r19, r1
     a88:	22 30       	cpi	r18, 0x02	; 2
     a8a:	31 05       	cpc	r19, r1
     a8c:	38 f4       	brcc	.+14     	; 0xa9c <laser_Finder+0xa8>
		beam = 5;   //la & la#
     a8e:	85 e0       	ldi	r24, 0x05	; 5
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <beam+0x1>
     a96:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <beam>
     a9a:	08 95       	ret
		}else if(reminder == 11 ){
     a9c:	0b 97       	sbiw	r24, 0x0b	; 11
     a9e:	39 f4       	brne	.+14     	; 0xaae <laser_Finder+0xba>
		beam = 6;   //si
     aa0:	86 e0       	ldi	r24, 0x06	; 6
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <beam+0x1>
     aa8:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <beam>
     aac:	08 95       	ret
		}else{
		beam = 7;
     aae:	87 e0       	ldi	r24, 0x07	; 7
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <beam+0x1>
     ab6:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <beam>
     aba:	08 95       	ret

00000abc <Index_2_Music>:
	buffer[j] = 0xff;//verify bit
	return i+1;
}

void Index_2_Music(){
	USART_Transmit(0x90);
     abc:	80 e9       	ldi	r24, 0x90	; 144
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
	USART_Transmit(music_buff[index_buff[index_buff_ptr]]);
     ac4:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <index_buff_ptr>
     ac8:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <index_buff_ptr+0x1>
     acc:	ef 57       	subi	r30, 0x7F	; 127
     ace:	fd 4f       	sbci	r31, 0xFD	; 253
     ad0:	e0 81       	ld	r30, Z
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	e8 53       	subi	r30, 0x38	; 56
     ad6:	fe 4f       	sbci	r31, 0xFE	; 254
     ad8:	80 81       	ld	r24, Z
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
	USART_Transmit(music_buff[index_buff[index_buff_ptr]+1]);
     ae0:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <index_buff_ptr>
     ae4:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <index_buff_ptr+0x1>
     ae8:	ef 57       	subi	r30, 0x7F	; 127
     aea:	fd 4f       	sbci	r31, 0xFD	; 253
     aec:	e0 81       	ld	r30, Z
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	e8 53       	subi	r30, 0x38	; 56
     af2:	fe 4f       	sbci	r31, 0xFE	; 254
     af4:	81 81       	ldd	r24, Z+1	; 0x01
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Transmit>
	laser_Finder(music_buff[index_buff[index_buff_ptr]]);
     afc:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <index_buff_ptr>
     b00:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <index_buff_ptr+0x1>
     b04:	ef 57       	subi	r30, 0x7F	; 127
     b06:	fd 4f       	sbci	r31, 0xFD	; 253
     b08:	e0 81       	ld	r30, Z
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	e8 53       	subi	r30, 0x38	; 56
     b0e:	fe 4f       	sbci	r31, 0xFE	; 254
     b10:	80 81       	ld	r24, Z
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <laser_Finder>
     b18:	08 95       	ret

00000b1a <Demutiplexer_Output>:
}

void Demutiplexer_Output(int time_point){

	//turn on logic
	if(beam==0 && beam_flag0==0){
     b1a:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <beam>
     b1e:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <beam+0x1>
     b22:	23 2b       	or	r18, r19
     b24:	c1 f4       	brne	.+48     	; 0xb56 <Demutiplexer_Output+0x3c>
     b26:	20 91 cd 05 	lds	r18, 0x05CD	; 0x8005cd <beam_flag0>
     b2a:	30 91 ce 05 	lds	r19, 0x05CE	; 0x8005ce <beam_flag0+0x1>
     b2e:	23 2b       	or	r18, r19
     b30:	09 f0       	breq	.+2      	; 0xb34 <Demutiplexer_Output+0x1a>
     b32:	4f c0       	rjmp	.+158    	; 0xbd2 <Demutiplexer_Output+0xb8>
		beam = 7;
     b34:	27 e0       	ldi	r18, 0x07	; 7
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	30 93 d0 05 	sts	0x05D0, r19	; 0x8005d0 <beam+0x1>
     b3c:	20 93 cf 05 	sts	0x05CF, r18	; 0x8005cf <beam>
		PORTA |= 0x01;
     b40:	10 9a       	sbi	0x02, 0	; 2
		beam_flag0 = 1;
     b42:	21 e0       	ldi	r18, 0x01	; 1
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	30 93 ce 05 	sts	0x05CE, r19	; 0x8005ce <beam_flag0+0x1>
     b4a:	20 93 cd 05 	sts	0x05CD, r18	; 0x8005cd <beam_flag0>
		time_mark0 = time_point;
     b4e:	90 93 be 05 	sts	0x05BE, r25	; 0x8005be <time_mark0+0x1>
     b52:	80 93 bd 05 	sts	0x05BD, r24	; 0x8005bd <time_mark0>
	}
	if(beam==1 && beam_flag1==0){
     b56:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <beam>
     b5a:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <beam+0x1>
     b5e:	21 30       	cpi	r18, 0x01	; 1
     b60:	31 05       	cpc	r19, r1
     b62:	c1 f4       	brne	.+48     	; 0xb94 <Demutiplexer_Output+0x7a>
     b64:	20 91 cb 05 	lds	r18, 0x05CB	; 0x8005cb <beam_flag1>
     b68:	30 91 cc 05 	lds	r19, 0x05CC	; 0x8005cc <beam_flag1+0x1>
     b6c:	23 2b       	or	r18, r19
     b6e:	09 f0       	breq	.+2      	; 0xb72 <Demutiplexer_Output+0x58>
     b70:	4f c0       	rjmp	.+158    	; 0xc10 <Demutiplexer_Output+0xf6>
		beam = 7;
     b72:	27 e0       	ldi	r18, 0x07	; 7
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	30 93 d0 05 	sts	0x05D0, r19	; 0x8005d0 <beam+0x1>
     b7a:	20 93 cf 05 	sts	0x05CF, r18	; 0x8005cf <beam>
		PORTD |= 0x01;
     b7e:	58 9a       	sbi	0x0b, 0	; 11
		beam_flag1 = 1;
     b80:	21 e0       	ldi	r18, 0x01	; 1
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	30 93 cc 05 	sts	0x05CC, r19	; 0x8005cc <beam_flag1+0x1>
     b88:	20 93 cb 05 	sts	0x05CB, r18	; 0x8005cb <beam_flag1>
		time_mark1 = time_point;
     b8c:	90 93 bc 05 	sts	0x05BC, r25	; 0x8005bc <time_mark1+0x1>
     b90:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <time_mark1>
	}
	if(beam==2 && beam_flag2==0){
     b94:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <beam>
     b98:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <beam+0x1>
     b9c:	22 30       	cpi	r18, 0x02	; 2
     b9e:	31 05       	cpc	r19, r1
     ba0:	c1 f4       	brne	.+48     	; 0xbd2 <Demutiplexer_Output+0xb8>
     ba2:	20 91 c9 05 	lds	r18, 0x05C9	; 0x8005c9 <beam_flag2>
     ba6:	30 91 ca 05 	lds	r19, 0x05CA	; 0x8005ca <beam_flag2+0x1>
     baa:	23 2b       	or	r18, r19
     bac:	09 f0       	breq	.+2      	; 0xbb0 <Demutiplexer_Output+0x96>
     bae:	4f c0       	rjmp	.+158    	; 0xc4e <Demutiplexer_Output+0x134>
		beam = 7;
     bb0:	27 e0       	ldi	r18, 0x07	; 7
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	30 93 d0 05 	sts	0x05D0, r19	; 0x8005d0 <beam+0x1>
     bb8:	20 93 cf 05 	sts	0x05CF, r18	; 0x8005cf <beam>
		PORTD |= 0x02;
     bbc:	59 9a       	sbi	0x0b, 1	; 11
		beam_flag2 = 1;
     bbe:	21 e0       	ldi	r18, 0x01	; 1
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	30 93 ca 05 	sts	0x05CA, r19	; 0x8005ca <beam_flag2+0x1>
     bc6:	20 93 c9 05 	sts	0x05C9, r18	; 0x8005c9 <beam_flag2>
		time_mark2 = time_point;
     bca:	90 93 ba 05 	sts	0x05BA, r25	; 0x8005ba <time_mark2+0x1>
     bce:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <time_mark2>
	}
	if(beam==3 && beam_flag3==0){
     bd2:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <beam>
     bd6:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <beam+0x1>
     bda:	23 30       	cpi	r18, 0x03	; 3
     bdc:	31 05       	cpc	r19, r1
     bde:	c1 f4       	brne	.+48     	; 0xc10 <Demutiplexer_Output+0xf6>
     be0:	20 91 c7 05 	lds	r18, 0x05C7	; 0x8005c7 <beam_flag3>
     be4:	30 91 c8 05 	lds	r19, 0x05C8	; 0x8005c8 <beam_flag3+0x1>
     be8:	23 2b       	or	r18, r19
     bea:	09 f0       	breq	.+2      	; 0xbee <Demutiplexer_Output+0xd4>
     bec:	4e c0       	rjmp	.+156    	; 0xc8a <Demutiplexer_Output+0x170>
		beam = 7;
     bee:	27 e0       	ldi	r18, 0x07	; 7
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	30 93 d0 05 	sts	0x05D0, r19	; 0x8005d0 <beam+0x1>
     bf6:	20 93 cf 05 	sts	0x05CF, r18	; 0x8005cf <beam>
		PORTE |= 0x08;
     bfa:	73 9a       	sbi	0x0e, 3	; 14
		beam_flag3 = 1;
     bfc:	21 e0       	ldi	r18, 0x01	; 1
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	30 93 c8 05 	sts	0x05C8, r19	; 0x8005c8 <beam_flag3+0x1>
     c04:	20 93 c7 05 	sts	0x05C7, r18	; 0x8005c7 <beam_flag3>
		time_mark3 = time_point;
     c08:	90 93 b8 05 	sts	0x05B8, r25	; 0x8005b8 <time_mark3+0x1>
     c0c:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <time_mark3>
	}
	if(beam==4  && beam_flag4==0){
     c10:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <beam>
     c14:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <beam+0x1>
     c18:	24 30       	cpi	r18, 0x04	; 4
     c1a:	31 05       	cpc	r19, r1
     c1c:	c1 f4       	brne	.+48     	; 0xc4e <Demutiplexer_Output+0x134>
     c1e:	20 91 c5 05 	lds	r18, 0x05C5	; 0x8005c5 <beam_flag4>
     c22:	30 91 c6 05 	lds	r19, 0x05C6	; 0x8005c6 <beam_flag4+0x1>
     c26:	23 2b       	or	r18, r19
     c28:	09 f0       	breq	.+2      	; 0xc2c <Demutiplexer_Output+0x112>
     c2a:	4d c0       	rjmp	.+154    	; 0xcc6 <Demutiplexer_Output+0x1ac>
		beam = 7;
     c2c:	27 e0       	ldi	r18, 0x07	; 7
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	30 93 d0 05 	sts	0x05D0, r19	; 0x8005d0 <beam+0x1>
     c34:	20 93 cf 05 	sts	0x05CF, r18	; 0x8005cf <beam>
		PORTE |= 0x04;
     c38:	72 9a       	sbi	0x0e, 2	; 14
		beam_flag4 = 1;
     c3a:	21 e0       	ldi	r18, 0x01	; 1
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	30 93 c6 05 	sts	0x05C6, r19	; 0x8005c6 <beam_flag4+0x1>
     c42:	20 93 c5 05 	sts	0x05C5, r18	; 0x8005c5 <beam_flag4>
		time_mark4 = time_point;
     c46:	90 93 b6 05 	sts	0x05B6, r25	; 0x8005b6 <time_mark4+0x1>
     c4a:	80 93 b5 05 	sts	0x05B5, r24	; 0x8005b5 <time_mark4>
	}
	if(beam==5 && beam_flag5==0){
     c4e:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <beam>
     c52:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <beam+0x1>
     c56:	25 30       	cpi	r18, 0x05	; 5
     c58:	31 05       	cpc	r19, r1
     c5a:	b9 f4       	brne	.+46     	; 0xc8a <Demutiplexer_Output+0x170>
     c5c:	20 91 c3 05 	lds	r18, 0x05C3	; 0x8005c3 <beam_flag5>
     c60:	30 91 c4 05 	lds	r19, 0x05C4	; 0x8005c4 <beam_flag5+0x1>
     c64:	23 2b       	or	r18, r19
     c66:	79 f5       	brne	.+94     	; 0xcc6 <Demutiplexer_Output+0x1ac>
		beam = 7;
     c68:	27 e0       	ldi	r18, 0x07	; 7
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	30 93 d0 05 	sts	0x05D0, r19	; 0x8005d0 <beam+0x1>
     c70:	20 93 cf 05 	sts	0x05CF, r18	; 0x8005cf <beam>
		PORTG |= 0x10;
     c74:	a4 9a       	sbi	0x14, 4	; 20
		beam_flag5 = 1;
     c76:	21 e0       	ldi	r18, 0x01	; 1
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	30 93 c4 05 	sts	0x05C4, r19	; 0x8005c4 <beam_flag5+0x1>
     c7e:	20 93 c3 05 	sts	0x05C3, r18	; 0x8005c3 <beam_flag5>
		time_mark5 = time_point;
     c82:	90 93 b4 05 	sts	0x05B4, r25	; 0x8005b4 <time_mark5+0x1>
     c86:	80 93 b3 05 	sts	0x05B3, r24	; 0x8005b3 <time_mark5>
	}
	if(beam==6 && beam_flag6==0){
     c8a:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <beam>
     c8e:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <beam+0x1>
     c92:	26 30       	cpi	r18, 0x06	; 6
     c94:	31 05       	cpc	r19, r1
     c96:	b9 f4       	brne	.+46     	; 0xcc6 <Demutiplexer_Output+0x1ac>
     c98:	20 91 c1 05 	lds	r18, 0x05C1	; 0x8005c1 <beam_flag6>
     c9c:	30 91 c2 05 	lds	r19, 0x05C2	; 0x8005c2 <beam_flag6+0x1>
     ca0:	23 2b       	or	r18, r19
     ca2:	89 f4       	brne	.+34     	; 0xcc6 <Demutiplexer_Output+0x1ac>
		beam = 7;
     ca4:	27 e0       	ldi	r18, 0x07	; 7
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	30 93 d0 05 	sts	0x05D0, r19	; 0x8005d0 <beam+0x1>
     cac:	20 93 cf 05 	sts	0x05CF, r18	; 0x8005cf <beam>
		PORTG |= 0x08;
     cb0:	a3 9a       	sbi	0x14, 3	; 20
		beam_flag6 = 1;
     cb2:	21 e0       	ldi	r18, 0x01	; 1
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	30 93 c2 05 	sts	0x05C2, r19	; 0x8005c2 <beam_flag6+0x1>
     cba:	20 93 c1 05 	sts	0x05C1, r18	; 0x8005c1 <beam_flag6>
		time_mark6 = time_point;
     cbe:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <time_mark6+0x1>
     cc2:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <time_mark6>
	}

	//turn off logic
	if(beam_flag0 = 1 && time_mark0 == (time_point+1)){
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	20 91 bd 05 	lds	r18, 0x05BD	; 0x8005bd <time_mark0>
     ccc:	30 91 be 05 	lds	r19, 0x05BE	; 0x8005be <time_mark0+0x1>
     cd0:	82 17       	cp	r24, r18
     cd2:	93 07       	cpc	r25, r19
     cd4:	29 f0       	breq	.+10     	; 0xce0 <Demutiplexer_Output+0x1c6>
     cd6:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <beam_flag0+0x1>
     cda:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <beam_flag0>
     cde:	05 c0       	rjmp	.+10     	; 0xcea <Demutiplexer_Output+0x1d0>
		beam_flag0 = 0;
     ce0:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <beam_flag0+0x1>
     ce4:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <beam_flag0>
		PORTA &= (0xFE);
     ce8:	10 98       	cbi	0x02, 0	; 2
	}
	if(beam_flag1 = 1 && time_mark1 == (time_point+1)){
     cea:	20 91 bb 05 	lds	r18, 0x05BB	; 0x8005bb <time_mark1>
     cee:	30 91 bc 05 	lds	r19, 0x05BC	; 0x8005bc <time_mark1+0x1>
     cf2:	82 17       	cp	r24, r18
     cf4:	93 07       	cpc	r25, r19
     cf6:	29 f0       	breq	.+10     	; 0xd02 <Demutiplexer_Output+0x1e8>
     cf8:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <beam_flag1+0x1>
     cfc:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <beam_flag1>
     d00:	05 c0       	rjmp	.+10     	; 0xd0c <Demutiplexer_Output+0x1f2>
		beam_flag1 = 0;
     d02:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <beam_flag1+0x1>
     d06:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <beam_flag1>
		PORTD &= (0xFE);
     d0a:	58 98       	cbi	0x0b, 0	; 11
	}
	if(beam_flag2 = 1 && time_mark2 == (time_point+1)){
     d0c:	20 91 b9 05 	lds	r18, 0x05B9	; 0x8005b9 <time_mark2>
     d10:	30 91 ba 05 	lds	r19, 0x05BA	; 0x8005ba <time_mark2+0x1>
     d14:	82 17       	cp	r24, r18
     d16:	93 07       	cpc	r25, r19
     d18:	29 f0       	breq	.+10     	; 0xd24 <Demutiplexer_Output+0x20a>
     d1a:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <beam_flag2+0x1>
     d1e:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <beam_flag2>
     d22:	05 c0       	rjmp	.+10     	; 0xd2e <Demutiplexer_Output+0x214>
		beam_flag2 = 0;
     d24:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <beam_flag2+0x1>
     d28:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <beam_flag2>
		PORTD &= (0xFD);
     d2c:	59 98       	cbi	0x0b, 1	; 11
	}
	if(beam_flag3 = 1 && time_mark3 == (time_point+1)){
     d2e:	20 91 b7 05 	lds	r18, 0x05B7	; 0x8005b7 <time_mark3>
     d32:	30 91 b8 05 	lds	r19, 0x05B8	; 0x8005b8 <time_mark3+0x1>
     d36:	82 17       	cp	r24, r18
     d38:	93 07       	cpc	r25, r19
     d3a:	29 f0       	breq	.+10     	; 0xd46 <Demutiplexer_Output+0x22c>
     d3c:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <beam_flag3+0x1>
     d40:	10 92 c7 05 	sts	0x05C7, r1	; 0x8005c7 <beam_flag3>
     d44:	05 c0       	rjmp	.+10     	; 0xd50 <Demutiplexer_Output+0x236>
		beam_flag3 = 0;
     d46:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <beam_flag3+0x1>
     d4a:	10 92 c7 05 	sts	0x05C7, r1	; 0x8005c7 <beam_flag3>
		PORTE &= (0xFE);
     d4e:	70 98       	cbi	0x0e, 0	; 14
	}
	if(beam_flag4 = 1 && time_mark4 == (time_point+1)){
     d50:	20 91 b5 05 	lds	r18, 0x05B5	; 0x8005b5 <time_mark4>
     d54:	30 91 b6 05 	lds	r19, 0x05B6	; 0x8005b6 <time_mark4+0x1>
     d58:	82 17       	cp	r24, r18
     d5a:	93 07       	cpc	r25, r19
     d5c:	29 f0       	breq	.+10     	; 0xd68 <Demutiplexer_Output+0x24e>
     d5e:	10 92 c6 05 	sts	0x05C6, r1	; 0x8005c6 <beam_flag4+0x1>
     d62:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <beam_flag4>
     d66:	05 c0       	rjmp	.+10     	; 0xd72 <Demutiplexer_Output+0x258>
		beam_flag4 = 0;
     d68:	10 92 c6 05 	sts	0x05C6, r1	; 0x8005c6 <beam_flag4+0x1>
     d6c:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <beam_flag4>
		PORTE &= (0xFD);
     d70:	71 98       	cbi	0x0e, 1	; 14
	}
	if(beam_flag5 = 1 && time_mark5 == (time_point+1)){
     d72:	20 91 b3 05 	lds	r18, 0x05B3	; 0x8005b3 <time_mark5>
     d76:	30 91 b4 05 	lds	r19, 0x05B4	; 0x8005b4 <time_mark5+0x1>
     d7a:	82 17       	cp	r24, r18
     d7c:	93 07       	cpc	r25, r19
     d7e:	29 f0       	breq	.+10     	; 0xd8a <Demutiplexer_Output+0x270>
     d80:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <beam_flag5+0x1>
     d84:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <beam_flag5>
     d88:	05 c0       	rjmp	.+10     	; 0xd94 <Demutiplexer_Output+0x27a>
		beam_flag5 = 0;
     d8a:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <beam_flag5+0x1>
     d8e:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <beam_flag5>
		PORTG &= (0xF7);
     d92:	a3 98       	cbi	0x14, 3	; 20
	}
	if(beam_flag6 = 1 && time_mark6 == (time_point+1)){
     d94:	20 91 b1 05 	lds	r18, 0x05B1	; 0x8005b1 <time_mark6>
     d98:	30 91 b2 05 	lds	r19, 0x05B2	; 0x8005b2 <time_mark6+0x1>
     d9c:	82 17       	cp	r24, r18
     d9e:	93 07       	cpc	r25, r19
     da0:	29 f0       	breq	.+10     	; 0xdac <Demutiplexer_Output+0x292>
     da2:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <beam_flag6+0x1>
     da6:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <beam_flag6>
     daa:	08 95       	ret
		beam_flag6 = 0;
     dac:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <beam_flag6+0x1>
     db0:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <beam_flag6>
		PORTG &= (0xEF);
     db4:	a4 98       	cbi	0x14, 4	; 20
     db6:	08 95       	ret

00000db8 <array_sorter>:
	}
}

void array_sorter(){
	memcpy(sorted_array, result_array, sizeof(result_array));
     db8:	8e e0       	ldi	r24, 0x0E	; 14
     dba:	e1 ea       	ldi	r30, 0xA1	; 161
     dbc:	f5 e0       	ldi	r31, 0x05	; 5
     dbe:	a3 e9       	ldi	r26, 0x93	; 147
     dc0:	b5 e0       	ldi	r27, 0x05	; 5
     dc2:	01 90       	ld	r0, Z+
     dc4:	0d 92       	st	X+, r0
     dc6:	8a 95       	dec	r24
     dc8:	e1 f7       	brne	.-8      	; 0xdc2 <array_sorter+0xa>
     dca:	43 e9       	ldi	r20, 0x93	; 147
     dcc:	55 e0       	ldi	r21, 0x05	; 5
     dce:	da 01       	movw	r26, r20
	int temp = 0;
	for(int i=1; i<7; i++){
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	70 e0       	ldi	r23, 0x00	; 0
		temp = sorted_array[i];
     dd4:	12 96       	adiw	r26, 0x02	; 2
     dd6:	2d 91       	ld	r18, X+
     dd8:	3c 91       	ld	r19, X
     dda:	13 97       	sbiw	r26, 0x03	; 3
		for(int j=i; j>=1 && temp<sorted_array[j-1]; j--){
     ddc:	16 16       	cp	r1, r22
     dde:	17 06       	cpc	r1, r23
     de0:	9c f4       	brge	.+38     	; 0xe08 <array_sorter+0x50>
     de2:	8d 91       	ld	r24, X+
     de4:	9c 91       	ld	r25, X
     de6:	11 97       	sbiw	r26, 0x01	; 1
     de8:	28 17       	cp	r18, r24
     dea:	39 07       	cpc	r19, r25
     dec:	6c f4       	brge	.+26     	; 0xe08 <array_sorter+0x50>
     dee:	fd 01       	movw	r30, r26
			sorted_array[j] = sorted_array[j-1];
     df0:	93 83       	std	Z+3, r25	; 0x03
     df2:	82 83       	std	Z+2, r24	; 0x02
			sorted_array[j-1] = temp;
     df4:	31 83       	std	Z+1, r19	; 0x01
     df6:	20 83       	st	Z, r18
void array_sorter(){
	memcpy(sorted_array, result_array, sizeof(result_array));
	int temp = 0;
	for(int i=1; i<7; i++){
		temp = sorted_array[i];
		for(int j=i; j>=1 && temp<sorted_array[j-1]; j--){
     df8:	e4 17       	cp	r30, r20
     dfa:	f5 07       	cpc	r31, r21
     dfc:	29 f0       	breq	.+10     	; 0xe08 <array_sorter+0x50>
     dfe:	92 91       	ld	r25, -Z
     e00:	82 91       	ld	r24, -Z
     e02:	28 17       	cp	r18, r24
     e04:	39 07       	cpc	r19, r25
     e06:	a4 f3       	brlt	.-24     	; 0xdf0 <array_sorter+0x38>
}

void array_sorter(){
	memcpy(sorted_array, result_array, sizeof(result_array));
	int temp = 0;
	for(int i=1; i<7; i++){
     e08:	6f 5f       	subi	r22, 0xFF	; 255
     e0a:	7f 4f       	sbci	r23, 0xFF	; 255
     e0c:	12 96       	adiw	r26, 0x02	; 2
     e0e:	67 30       	cpi	r22, 0x07	; 7
     e10:	71 05       	cpc	r23, r1
     e12:	01 f7       	brne	.-64     	; 0xdd4 <array_sorter+0x1c>
		for(int j=i; j>=1 && temp<sorted_array[j-1]; j--){
			sorted_array[j] = sorted_array[j-1];
			sorted_array[j-1] = temp;
		}
	}
}
     e14:	08 95       	ret

00000e16 <ADC_quantization>:

void ADC_quantization(){
	compare_value = sorted_array[0];   //value position in buffer
     e16:	20 91 93 05 	lds	r18, 0x0593	; 0x800593 <sorted_array>
     e1a:	30 91 94 05 	lds	r19, 0x0594	; 0x800594 <sorted_array+0x1>
     e1e:	30 93 92 05 	sts	0x0592, r19	; 0x800592 <compare_value+0x1>
     e22:	20 93 91 05 	sts	0x0591, r18	; 0x800591 <compare_value>
	adc_sensitive_detect[adc_channel] = (compare_value>190);
     e26:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <adc_channel>
     e2a:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <adc_channel+0x1>
     e2e:	fc 01       	movw	r30, r24
     e30:	ee 0f       	add	r30, r30
     e32:	ff 1f       	adc	r31, r31
     e34:	e1 58       	subi	r30, 0x81	; 129
     e36:	fa 4f       	sbci	r31, 0xFA	; 250
     e38:	41 e0       	ldi	r20, 0x01	; 1
     e3a:	50 e0       	ldi	r21, 0x00	; 0
     e3c:	2f 3b       	cpi	r18, 0xBF	; 191
     e3e:	31 05       	cpc	r19, r1
     e40:	14 f4       	brge	.+4      	; 0xe46 <ADC_quantization+0x30>
     e42:	40 e0       	ldi	r20, 0x00	; 0
     e44:	50 e0       	ldi	r21, 0x00	; 0
     e46:	51 83       	std	Z+1, r21	; 0x01
     e48:	40 83       	st	Z, r20
	if((compare_value>220 && compare_value<300)){
     e4a:	a9 01       	movw	r20, r18
     e4c:	4d 5d       	subi	r20, 0xDD	; 221
     e4e:	51 09       	sbc	r21, r1
     e50:	4f 34       	cpi	r20, 0x4F	; 79
     e52:	51 05       	cpc	r21, r1
     e54:	50 f4       	brcc	.+20     	; 0xe6a <ADC_quantization+0x54>
		adc_buffer[adc_channel] = 1;
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	fc 01       	movw	r30, r24
     e5c:	e1 59       	subi	r30, 0x91	; 145
     e5e:	fa 4f       	sbci	r31, 0xFA	; 250
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	91 83       	std	Z+1, r25	; 0x01
     e66:	80 83       	st	Z, r24
     e68:	08 95       	ret
		}else if(compare_value>340){
     e6a:	25 35       	cpi	r18, 0x55	; 85
     e6c:	31 40       	sbci	r19, 0x01	; 1
     e6e:	4c f0       	brlt	.+18     	; 0xe82 <ADC_quantization+0x6c>
		adc_buffer[adc_channel] = 2;
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	fc 01       	movw	r30, r24
     e76:	e1 59       	subi	r30, 0x91	; 145
     e78:	fa 4f       	sbci	r31, 0xFA	; 250
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	91 83       	std	Z+1, r25	; 0x01
     e80:	80 83       	st	Z, r24
     e82:	08 95       	ret

00000e84 <main>:
	
}

int main(void)
{	
	Clock_Prescale();
     e84:	0e 94 3a 03 	call	0x674	; 0x674 <Clock_Prescale>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e88:	2f e7       	ldi	r18, 0x7F	; 127
     e8a:	89 ea       	ldi	r24, 0xA9	; 169
     e8c:	93 e0       	ldi	r25, 0x03	; 3
     e8e:	21 50       	subi	r18, 0x01	; 1
     e90:	80 40       	sbci	r24, 0x00	; 0
     e92:	90 40       	sbci	r25, 0x00	; 0
     e94:	e1 f7       	brne	.-8      	; 0xe8e <main+0xa>
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <main+0x14>
     e98:	00 00       	nop
	_delay_ms(150);//LCD power up delay
	lcd_init();
     e9a:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_init>
	LCD_Disp_First(4,Instrument_Type);
     e9e:	60 91 d1 05 	lds	r22, 0x05D1	; 0x8005d1 <Instrument_Type>
     ea2:	70 91 d2 05 	lds	r23, 0x05D2	; 0x8005d2 <Instrument_Type+0x1>
     ea6:	84 e0       	ldi	r24, 0x04	; 4
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 40 03 	call	0x680	; 0x680 <LCD_Disp_First>
	LCD_Disp_Second();
     eae:	0e 94 86 03 	call	0x70c	; 0x70c <LCD_Disp_Second>
	LCD_Disp_Third(cur_music);
     eb2:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <cur_music>
     eb6:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <cur_music+0x1>
     eba:	0e 94 a2 03 	call	0x744	; 0x744 <LCD_Disp_Third>
	LCD_Disp_Fourth();
     ebe:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <LCD_Disp_Fourth>
	PB_INITILAZATION();
     ec2:	81 b1       	in	r24, 0x01	; 1
     ec4:	81 7e       	andi	r24, 0xE1	; 225
     ec6:	81 b9       	out	0x01, r24	; 1
	laser_Initilazation();
     ec8:	0e 94 ef 04 	call	0x9de	; 0x9de <laser_Initilazation>
	SD_init();
     ecc:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SD_init>
	SPI_Clock_Change(32);
     ed0:	80 e2       	ldi	r24, 0x20	; 32
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 46 01 	call	0x28c	; 0x28c <SPI_Clock_Change>
	SD_Read_Single(FAT32_Addr(144,Music_File_Addr(cur_music)),0x0000,0x0200,sd_data);
     ed8:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <cur_music>
     edc:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <cur_music+0x1>
     ee0:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <Music_File_Addr>
	}
}

unsigned long FAT32_Addr(unsigned long part_set, unsigned long off_set){
	unsigned long fat32_addr;
	fat32_addr = (part_set + off_set) * 0x200;
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	80 57       	subi	r24, 0x70	; 112
     eea:	9f 4f       	sbci	r25, 0xFF	; 255
     eec:	af 4f       	sbci	r26, 0xFF	; 255
     eee:	bf 4f       	sbci	r27, 0xFF	; 255
     ef0:	bc 01       	movw	r22, r24
     ef2:	cd 01       	movw	r24, r26
     ef4:	05 2e       	mov	r0, r21
     ef6:	59 e0       	ldi	r21, 0x09	; 9
     ef8:	66 0f       	add	r22, r22
     efa:	77 1f       	adc	r23, r23
     efc:	88 1f       	adc	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	5a 95       	dec	r21
     f02:	d1 f7       	brne	.-12     	; 0xef8 <main+0x74>
     f04:	50 2d       	mov	r21, r0
	LCD_Disp_Fourth();
	PB_INITILAZATION();
	laser_Initilazation();
	SD_init();
	SPI_Clock_Change(32);
	SD_Read_Single(FAT32_Addr(144,Music_File_Addr(cur_music)),0x0000,0x0200,sd_data);
     f06:	0f e3       	ldi	r16, 0x3F	; 63
     f08:	13 e0       	ldi	r17, 0x03	; 3
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	32 e0       	ldi	r19, 0x02	; 2
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	0e 94 29 02 	call	0x452	; 0x452 <SD_Read_Single>
	MIDI_Buffer();
     f16:	0e 94 00 03 	call	0x600	; 0x600 <MIDI_Buffer>
	adc_init();
     f1a:	0e 94 92 00 	call	0x124	; 0x124 <adc_init>
	USART_Init(MYUBRR);
     f1e:	8f e0       	ldi	r24, 0x0F	; 15
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 2f 03 	call	0x65e	; 0x65e <USART_Init>
	timer_init();
     f26:	0e 94 1f 03 	call	0x63e	; 0x63e <timer_init>
	sei();
     f2a:	78 94       	sei
	
	while(1){
 	}
     f2c:	ff cf       	rjmp	.-2      	; 0xf2c <main+0xa8>

00000f2e <__vector_19>:
}

ISR(ADC_vect){
     f2e:	1f 92       	push	r1
     f30:	0f 92       	push	r0
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	0f 92       	push	r0
     f36:	11 24       	eor	r1, r1
     f38:	2f 93       	push	r18
     f3a:	3f 93       	push	r19
     f3c:	4f 93       	push	r20
     f3e:	5f 93       	push	r21
     f40:	6f 93       	push	r22
     f42:	7f 93       	push	r23
     f44:	8f 93       	push	r24
     f46:	9f 93       	push	r25
     f48:	af 93       	push	r26
     f4a:	bf 93       	push	r27
     f4c:	ef 93       	push	r30
     f4e:	ff 93       	push	r31
	check = 1;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <check+0x1>
     f58:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <check>
	result_array[adc_flag] = ADC;
     f5c:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <adc_flag>
     f60:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <adc_flag+0x1>
     f64:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     f68:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     f6c:	fc 01       	movw	r30, r24
     f6e:	ee 0f       	add	r30, r30
     f70:	ff 1f       	adc	r31, r31
     f72:	ef 55       	subi	r30, 0x5F	; 95
     f74:	fa 4f       	sbci	r31, 0xFA	; 250
     f76:	31 83       	std	Z+1, r19	; 0x01
     f78:	20 83       	st	Z, r18
	adc_flag = (adc_flag + 1) % Sensor_Amount;//Sensor_Amount;
     f7a:	01 96       	adiw	r24, 0x01	; 1
     f7c:	67 e0       	ldi	r22, 0x07	; 7
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__divmodhi4>
     f84:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <adc_flag+0x1>
     f88:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <adc_flag>
	if(adc_flag == (Sensor_Amount - 1)){//Sensor_Amount-1){
     f8c:	06 97       	sbiw	r24, 0x06	; 6
     f8e:	d9 f4       	brne	.+54     	; 0xfc6 <__vector_19+0x98>
		result_array[adc_flag] = ADC;
     f90:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     f94:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     f98:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <result_array+0xd>
     f9c:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <result_array+0xc>
		array_sorter();
     fa0:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <array_sorter>
		ADC_quantization();
     fa4:	0e 94 0b 07 	call	0xe16	; 0xe16 <ADC_quantization>
		adc_channel = (adc_channel + 1) % Sensor_Amount;//0..6
     fa8:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <adc_channel>
     fac:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <adc_channel+0x1>
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	67 e0       	ldi	r22, 0x07	; 7
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__divmodhi4>
     fba:	90 93 90 05 	sts	0x0590, r25	; 0x800590 <adc_channel+0x1>
     fbe:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <adc_channel>
		ADC_Channel_Select(adc_channel);
     fc2:	0e 94 54 00 	call	0xa8	; 0xa8 <ADC_Channel_Select>
	}
}
     fc6:	ff 91       	pop	r31
     fc8:	ef 91       	pop	r30
     fca:	bf 91       	pop	r27
     fcc:	af 91       	pop	r26
     fce:	9f 91       	pop	r25
     fd0:	8f 91       	pop	r24
     fd2:	7f 91       	pop	r23
     fd4:	6f 91       	pop	r22
     fd6:	5f 91       	pop	r21
     fd8:	4f 91       	pop	r20
     fda:	3f 91       	pop	r19
     fdc:	2f 91       	pop	r18
     fde:	0f 90       	pop	r0
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	0f 90       	pop	r0
     fe4:	1f 90       	pop	r1
     fe6:	18 95       	reti

00000fe8 <__vector_10>:

ISR(TIMER0_COMP_vect){
     fe8:	1f 92       	push	r1
     fea:	0f 92       	push	r0
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	0f 92       	push	r0
     ff0:	11 24       	eor	r1, r1
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	2f 93       	push	r18
     ff8:	3f 93       	push	r19
     ffa:	4f 93       	push	r20
     ffc:	5f 93       	push	r21
     ffe:	6f 93       	push	r22
    1000:	7f 93       	push	r23
    1002:	8f 93       	push	r24
    1004:	9f 93       	push	r25
    1006:	af 93       	push	r26
    1008:	bf 93       	push	r27
    100a:	ef 93       	push	r30
    100c:	ff 93       	push	r31
	//make sure 100Hz
	//400Hz
	unsigned long music_addr = 0;
	midi_cnt++;
    100e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <__data_end>
    1012:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <__data_end+0x1>
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <__data_end+0x1>
    101c:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <__data_end>
	half_second_counter = (half_second_counter + 1) % 200;
    1020:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <half_second_counter>
    1024:	90 91 c0 05 	lds	r25, 0x05C0	; 0x8005c0 <half_second_counter+0x1>
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	68 ec       	ldi	r22, 0xC8	; 200
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__divmodhi4>
    1032:	90 93 c0 05 	sts	0x05C0, r25	; 0x8005c0 <half_second_counter+0x1>
    1036:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <half_second_counter>
	
	//Change mode button
	if(!(PINA & (1<<PB_MODE)) && pre_MODE_flag == 1){
    103a:	04 99       	sbic	0x00, 4	; 0
    103c:	24 c0       	rjmp	.+72     	; 0x1086 <__vector_10+0x9e>
    103e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <pre_MODE_flag>
    1042:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <pre_MODE_flag+0x1>
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	f1 f4       	brne	.+60     	; 0x1086 <__vector_10+0x9e>
		free_mode_flag = !free_mode_flag;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <free_mode_flag>
    1052:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <free_mode_flag+0x1>
    1056:	23 2b       	or	r18, r19
    1058:	11 f0       	breq	.+4      	; 0x105e <__vector_10+0x76>
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <free_mode_flag+0x1>
    1062:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <free_mode_flag>
		Autoplay_flag = !Autoplay_flag;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	20 91 af 05 	lds	r18, 0x05AF	; 0x8005af <Autoplay_flag>
    106e:	30 91 b0 05 	lds	r19, 0x05B0	; 0x8005b0 <Autoplay_flag+0x1>
    1072:	23 2b       	or	r18, r19
    1074:	11 f0       	breq	.+4      	; 0x107a <__vector_10+0x92>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	90 93 b0 05 	sts	0x05B0, r25	; 0x8005b0 <Autoplay_flag+0x1>
    107e:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <Autoplay_flag>
		LCD_Disp_Second();
    1082:	0e 94 86 03 	call	0x70c	; 0x70c <LCD_Disp_Second>
	}
	pre_MODE_flag = ((PINA & (1<<PB_MODE)) >> PB_MODE);
    1086:	80 b1       	in	r24, 0x00	; 0
    1088:	82 95       	swap	r24
    108a:	81 70       	andi	r24, 0x01	; 1
    108c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <pre_MODE_flag>
    1090:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <pre_MODE_flag+0x1>
	
	//OK button
	if(!(PINA & (1<<PB_OK)) && pre_OK_flag == 1){
    1094:	02 99       	sbic	0x00, 2	; 0
    1096:	0c c0       	rjmp	.+24     	; 0x10b0 <__vector_10+0xc8>
    1098:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <pre_OK_flag>
    109c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <pre_OK_flag+0x1>
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	31 f4       	brne	.+12     	; 0x10b0 <__vector_10+0xc8>
		cur_music_ok = 1;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <cur_music_ok+0x1>
    10ac:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <cur_music_ok>
	}
	pre_OK_flag = ((PINA & (1<<PB_MODE)) >> PB_MODE);
    10b0:	80 b1       	in	r24, 0x00	; 0
    10b2:	82 95       	swap	r24
    10b4:	81 70       	andi	r24, 0x01	; 1
    10b6:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <pre_OK_flag>
    10ba:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <pre_OK_flag+0x1>
	
	//change instrument button
	if(!(PINA & (1<<PB_TIMBRE)) && pre_TIMBRE_flag == 1){
    10be:	01 99       	sbic	0x00, 1	; 0
    10c0:	2c c0       	rjmp	.+88     	; 0x111a <__vector_10+0x132>
    10c2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pre_TIMBRE_flag>
    10c6:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <pre_TIMBRE_flag+0x1>
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	31 f5       	brne	.+76     	; 0x111a <__vector_10+0x132>
		led_flag = !led_flag;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	20 91 d5 05 	lds	r18, 0x05D5	; 0x8005d5 <led_flag>
    10d6:	30 91 d6 05 	lds	r19, 0x05D6	; 0x8005d6 <led_flag+0x1>
    10da:	23 2b       	or	r18, r19
    10dc:	11 f0       	breq	.+4      	; 0x10e2 <__vector_10+0xfa>
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	90 93 d6 05 	sts	0x05D6, r25	; 0x8005d6 <led_flag+0x1>
    10e6:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <led_flag>
		change_instrument_flag = 1;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	90 93 d4 05 	sts	0x05D4, r25	; 0x8005d4 <change_instrument_flag+0x1>
    10f2:	80 93 d3 05 	sts	0x05D3, r24	; 0x8005d3 <change_instrument_flag>
		Instrument_Type = (Instrument_Type + 1)  % 3;
    10f6:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <Instrument_Type>
    10fa:	90 91 d2 05 	lds	r25, 0x05D2	; 0x8005d2 <Instrument_Type+0x1>
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	63 e0       	ldi	r22, 0x03	; 3
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__divmodhi4>
    1108:	90 93 d2 05 	sts	0x05D2, r25	; 0x8005d2 <Instrument_Type+0x1>
    110c:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <Instrument_Type>
		LCD_Disp_First(4,Instrument_Type);
    1110:	bc 01       	movw	r22, r24
    1112:	84 e0       	ldi	r24, 0x04	; 4
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 40 03 	call	0x680	; 0x680 <LCD_Disp_First>
	}
	pre_TIMBRE_flag = ((PINA & (1<<PB_TIMBRE)) >> PB_TIMBRE);
    111a:	80 b1       	in	r24, 0x00	; 0
    111c:	86 95       	lsr	r24
    111e:	81 70       	andi	r24, 0x01	; 1
    1120:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <pre_TIMBRE_flag>
    1124:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <pre_TIMBRE_flag+0x1>
	Midi_Switch_Instrument();
    1128:	0e 94 a0 04 	call	0x940	; 0x940 <Midi_Switch_Instrument>
	
	//free mode
	if(free_mode_flag){
    112c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <free_mode_flag>
    1130:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <free_mode_flag+0x1>
    1134:	89 2b       	or	r24, r25
    1136:	21 f0       	breq	.+8      	; 0x1140 <__vector_10+0x158>
		Hand_Detection(Sensor_Amount - 1);
    1138:	86 e0       	ldi	r24, 0x06	; 6
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <Hand_Detection>
	}
	
	//Autoplay mode
	if(Autoplay_flag){
    1140:	80 91 af 05 	lds	r24, 0x05AF	; 0x8005af <Autoplay_flag>
    1144:	90 91 b0 05 	lds	r25, 0x05B0	; 0x8005b0 <Autoplay_flag+0x1>
    1148:	89 2b       	or	r24, r25
    114a:	09 f4       	brne	.+2      	; 0x114e <__vector_10+0x166>
    114c:	c4 c0       	rjmp	.+392    	; 0x12d6 <__vector_10+0x2ee>
		//Next button
		if(!(PINA&(1<<PB_NEXT)) && pre_NEXT_flag == 1){
    114e:	03 99       	sbic	0x00, 3	; 0
    1150:	19 c0       	rjmp	.+50     	; 0x1184 <__vector_10+0x19c>
    1152:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <pre_NEXT_flag>
    1156:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <pre_NEXT_flag+0x1>
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	99 f4       	brne	.+38     	; 0x1184 <__vector_10+0x19c>
			cur_music = (cur_music + 1) % MUSIC_NUM;
    115e:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <cur_music>
    1162:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <cur_music+0x1>
    1166:	01 96       	adiw	r24, 0x01	; 1
    1168:	81 70       	andi	r24, 0x01	; 1
    116a:	90 78       	andi	r25, 0x80	; 128
    116c:	99 23       	and	r25, r25
    116e:	24 f4       	brge	.+8      	; 0x1178 <__vector_10+0x190>
    1170:	01 97       	sbiw	r24, 0x01	; 1
    1172:	8e 6f       	ori	r24, 0xFE	; 254
    1174:	9f 6f       	ori	r25, 0xFF	; 255
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <cur_music+0x1>
    117c:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <cur_music>
			LCD_Disp_Third(cur_music);
    1180:	0e 94 a2 03 	call	0x744	; 0x744 <LCD_Disp_Third>
		}
		pre_NEXT_flag = ((PINA & (1<<PB_NEXT)) >> PB_NEXT);
    1184:	80 b1       	in	r24, 0x00	; 0
    1186:	83 fb       	bst	r24, 3
    1188:	88 27       	eor	r24, r24
    118a:	80 f9       	bld	r24, 0
    118c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <pre_NEXT_flag>
    1190:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <pre_NEXT_flag+0x1>
		
		if(cur_music_ok){
    1194:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <cur_music_ok>
    1198:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <cur_music_ok+0x1>
    119c:	89 2b       	or	r24, r25
    119e:	51 f1       	breq	.+84     	; 0x11f4 <__vector_10+0x20c>
			cur_music_ok = 0;
    11a0:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <cur_music_ok+0x1>
    11a4:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <cur_music_ok>
			midi_cnt = 0;
    11a8:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <__data_end+0x1>
    11ac:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <__data_end>
			music_addr = Music_File_Addr(cur_music);
    11b0:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <cur_music>
    11b4:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <cur_music+0x1>
    11b8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <Music_File_Addr>
	}
}

unsigned long FAT32_Addr(unsigned long part_set, unsigned long off_set){
	unsigned long fat32_addr;
	fat32_addr = (part_set + off_set) * 0x200;
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	80 57       	subi	r24, 0x70	; 112
    11c2:	9f 4f       	sbci	r25, 0xFF	; 255
    11c4:	af 4f       	sbci	r26, 0xFF	; 255
    11c6:	bf 4f       	sbci	r27, 0xFF	; 255
    11c8:	bc 01       	movw	r22, r24
    11ca:	cd 01       	movw	r24, r26
    11cc:	05 2e       	mov	r0, r21
    11ce:	59 e0       	ldi	r21, 0x09	; 9
    11d0:	66 0f       	add	r22, r22
    11d2:	77 1f       	adc	r23, r23
    11d4:	88 1f       	adc	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	5a 95       	dec	r21
    11da:	d1 f7       	brne	.-12     	; 0x11d0 <__vector_10+0x1e8>
    11dc:	50 2d       	mov	r21, r0
		
		if(cur_music_ok){
			cur_music_ok = 0;
			midi_cnt = 0;
			music_addr = Music_File_Addr(cur_music);
			SD_Read_Single(FAT32_Addr(144,music_addr),0x0000,0x0200,sd_data);
    11de:	0f e3       	ldi	r16, 0x3F	; 63
    11e0:	13 e0       	ldi	r17, 0x03	; 3
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	32 e0       	ldi	r19, 0x02	; 2
    11e6:	40 e0       	ldi	r20, 0x00	; 0
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	0e 94 29 02 	call	0x452	; 0x452 <SD_Read_Single>
			MIDI_Buffer();
    11ee:	0e 94 00 03 	call	0x600	; 0x600 <MIDI_Buffer>
    11f2:	6b c0       	rjmp	.+214    	; 0x12ca <__vector_10+0x2e2>
		}else{
			if(midi_cnt == 25){//25
    11f4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <__data_end>
    11f8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <__data_end+0x1>
    11fc:	49 97       	sbiw	r24, 0x19	; 25
    11fe:	09 f0       	breq	.+2      	; 0x1202 <__vector_10+0x21a>
    1200:	64 c0       	rjmp	.+200    	; 0x12ca <__vector_10+0x2e2>
				midi_cnt = 0;
    1202:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <__data_end+0x1>
    1206:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <__data_end>
				
				if(time_buff[time_buff_ptr] != 0xFF){
    120a:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <time_buff_ptr>
    120e:	30 91 c3 01 	lds	r19, 0x01C3	; 0x8001c3 <time_buff_ptr+0x1>
    1212:	f9 01       	movw	r30, r18
    1214:	e3 5f       	subi	r30, 0xF3	; 243
    1216:	fc 4f       	sbci	r31, 0xFC	; 252
    1218:	80 81       	ld	r24, Z
    121a:	8f 3f       	cpi	r24, 0xFF	; 255
    121c:	a9 f1       	breq	.+106    	; 0x1288 <__vector_10+0x2a0>
					if(time_buff[time_buff_ptr] != 0){
    121e:	88 23       	and	r24, r24
    1220:	31 f0       	breq	.+12     	; 0x122e <__vector_10+0x246>
						time_buff[time_buff_ptr]--;
    1222:	f9 01       	movw	r30, r18
    1224:	e3 5f       	subi	r30, 0xF3	; 243
    1226:	fc 4f       	sbci	r31, 0xFC	; 252
    1228:	81 50       	subi	r24, 0x01	; 1
    122a:	80 83       	st	Z, r24
    122c:	4e c0       	rjmp	.+156    	; 0x12ca <__vector_10+0x2e2>
						}else{
						if(index_buff[index_buff_ptr] != 0xFF){
    122e:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <index_buff_ptr>
    1232:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <index_buff_ptr+0x1>
    1236:	fc 01       	movw	r30, r24
    1238:	ef 57       	subi	r30, 0x7F	; 127
    123a:	fd 4f       	sbci	r31, 0xFD	; 253
    123c:	20 81       	ld	r18, Z
    123e:	2f 3f       	cpi	r18, 0xFF	; 255
    1240:	09 f4       	brne	.+2      	; 0x1244 <__vector_10+0x25c>
    1242:	43 c0       	rjmp	.+134    	; 0x12ca <__vector_10+0x2e2>
							while(index_buff[index_buff_ptr] != 0){
    1244:	22 23       	and	r18, r18
    1246:	89 f0       	breq	.+34     	; 0x126a <__vector_10+0x282>
								Index_2_Music();  //laser finder included
    1248:	0e 94 5e 05 	call	0xabc	; 0xabc <Index_2_Music>
								index_buff_ptr++;
    124c:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <index_buff_ptr>
    1250:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <index_buff_ptr+0x1>
    1254:	01 96       	adiw	r24, 0x01	; 1
    1256:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <index_buff_ptr+0x1>
    125a:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <index_buff_ptr>
				if(time_buff[time_buff_ptr] != 0xFF){
					if(time_buff[time_buff_ptr] != 0){
						time_buff[time_buff_ptr]--;
						}else{
						if(index_buff[index_buff_ptr] != 0xFF){
							while(index_buff[index_buff_ptr] != 0){
    125e:	fc 01       	movw	r30, r24
    1260:	ef 57       	subi	r30, 0x7F	; 127
    1262:	fd 4f       	sbci	r31, 0xFD	; 253
    1264:	20 81       	ld	r18, Z
    1266:	21 11       	cpse	r18, r1
    1268:	ef cf       	rjmp	.-34     	; 0x1248 <__vector_10+0x260>
								Index_2_Music();  //laser finder included
								index_buff_ptr++;
							}
							index_buff_ptr++;
    126a:	01 96       	adiw	r24, 0x01	; 1
    126c:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <index_buff_ptr+0x1>
    1270:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <index_buff_ptr>
							time_buff_ptr++;
    1274:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <time_buff_ptr>
    1278:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <time_buff_ptr+0x1>
    127c:	01 96       	adiw	r24, 0x01	; 1
    127e:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <time_buff_ptr+0x1>
    1282:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <time_buff_ptr>
    1286:	21 c0       	rjmp	.+66     	; 0x12ca <__vector_10+0x2e2>
						}
					}
					}else{
					SD_Read_Single(FAT32_Addr(144,Music_File_Addr(cur_music)),0x0000,0x0200,sd_data);
    1288:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <cur_music>
    128c:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <cur_music+0x1>
    1290:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <Music_File_Addr>
	}
}

unsigned long FAT32_Addr(unsigned long part_set, unsigned long off_set){
	unsigned long fat32_addr;
	fat32_addr = (part_set + off_set) * 0x200;
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	80 57       	subi	r24, 0x70	; 112
    129a:	9f 4f       	sbci	r25, 0xFF	; 255
    129c:	af 4f       	sbci	r26, 0xFF	; 255
    129e:	bf 4f       	sbci	r27, 0xFF	; 255
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	05 2e       	mov	r0, r21
    12a6:	59 e0       	ldi	r21, 0x09	; 9
    12a8:	66 0f       	add	r22, r22
    12aa:	77 1f       	adc	r23, r23
    12ac:	88 1f       	adc	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	5a 95       	dec	r21
    12b2:	d1 f7       	brne	.-12     	; 0x12a8 <__vector_10+0x2c0>
    12b4:	50 2d       	mov	r21, r0
							index_buff_ptr++;
							time_buff_ptr++;
						}
					}
					}else{
					SD_Read_Single(FAT32_Addr(144,Music_File_Addr(cur_music)),0x0000,0x0200,sd_data);
    12b6:	0f e3       	ldi	r16, 0x3F	; 63
    12b8:	13 e0       	ldi	r17, 0x03	; 3
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	32 e0       	ldi	r19, 0x02	; 2
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	50 e0       	ldi	r21, 0x00	; 0
    12c2:	0e 94 29 02 	call	0x452	; 0x452 <SD_Read_Single>
					MIDI_Buffer();
    12c6:	0e 94 00 03 	call	0x600	; 0x600 <MIDI_Buffer>
				}
				
			}
		}
		Demutiplexer_Output(half_second_counter);//inside if(Autoplay_flag)
    12ca:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <half_second_counter>
    12ce:	90 91 c0 05 	lds	r25, 0x05C0	; 0x8005c0 <half_second_counter+0x1>
    12d2:	0e 94 8d 05 	call	0xb1a	; 0xb1a <Demutiplexer_Output>
	}
}
    12d6:	ff 91       	pop	r31
    12d8:	ef 91       	pop	r30
    12da:	bf 91       	pop	r27
    12dc:	af 91       	pop	r26
    12de:	9f 91       	pop	r25
    12e0:	8f 91       	pop	r24
    12e2:	7f 91       	pop	r23
    12e4:	6f 91       	pop	r22
    12e6:	5f 91       	pop	r21
    12e8:	4f 91       	pop	r20
    12ea:	3f 91       	pop	r19
    12ec:	2f 91       	pop	r18
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	0f 90       	pop	r0
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	0f 90       	pop	r0
    12f8:	1f 90       	pop	r1
    12fa:	18 95       	reti

000012fc <__divmodhi4>:
    12fc:	97 fb       	bst	r25, 7
    12fe:	07 2e       	mov	r0, r23
    1300:	16 f4       	brtc	.+4      	; 0x1306 <__divmodhi4+0xa>
    1302:	00 94       	com	r0
    1304:	07 d0       	rcall	.+14     	; 0x1314 <__divmodhi4_neg1>
    1306:	77 fd       	sbrc	r23, 7
    1308:	09 d0       	rcall	.+18     	; 0x131c <__divmodhi4_neg2>
    130a:	0e 94 98 09 	call	0x1330	; 0x1330 <__udivmodhi4>
    130e:	07 fc       	sbrc	r0, 7
    1310:	05 d0       	rcall	.+10     	; 0x131c <__divmodhi4_neg2>
    1312:	3e f4       	brtc	.+14     	; 0x1322 <__divmodhi4_exit>

00001314 <__divmodhi4_neg1>:
    1314:	90 95       	com	r25
    1316:	81 95       	neg	r24
    1318:	9f 4f       	sbci	r25, 0xFF	; 255
    131a:	08 95       	ret

0000131c <__divmodhi4_neg2>:
    131c:	70 95       	com	r23
    131e:	61 95       	neg	r22
    1320:	7f 4f       	sbci	r23, 0xFF	; 255

00001322 <__divmodhi4_exit>:
    1322:	08 95       	ret

00001324 <__tablejump2__>:
    1324:	ee 0f       	add	r30, r30
    1326:	ff 1f       	adc	r31, r31
    1328:	05 90       	lpm	r0, Z+
    132a:	f4 91       	lpm	r31, Z
    132c:	e0 2d       	mov	r30, r0
    132e:	09 94       	ijmp

00001330 <__udivmodhi4>:
    1330:	aa 1b       	sub	r26, r26
    1332:	bb 1b       	sub	r27, r27
    1334:	51 e1       	ldi	r21, 0x11	; 17
    1336:	07 c0       	rjmp	.+14     	; 0x1346 <__udivmodhi4_ep>

00001338 <__udivmodhi4_loop>:
    1338:	aa 1f       	adc	r26, r26
    133a:	bb 1f       	adc	r27, r27
    133c:	a6 17       	cp	r26, r22
    133e:	b7 07       	cpc	r27, r23
    1340:	10 f0       	brcs	.+4      	; 0x1346 <__udivmodhi4_ep>
    1342:	a6 1b       	sub	r26, r22
    1344:	b7 0b       	sbc	r27, r23

00001346 <__udivmodhi4_ep>:
    1346:	88 1f       	adc	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	5a 95       	dec	r21
    134c:	a9 f7       	brne	.-22     	; 0x1338 <__udivmodhi4_loop>
    134e:	80 95       	com	r24
    1350:	90 95       	com	r25
    1352:	bc 01       	movw	r22, r24
    1354:	cd 01       	movw	r24, r26
    1356:	08 95       	ret

00001358 <_exit>:
    1358:	f8 94       	cli

0000135a <__stop_program>:
    135a:	ff cf       	rjmp	.-2      	; 0x135a <__stop_program>
